
var util = require("util");
var choreography = require("temboo/core/choreography");


/*
    CancelSubscription
    Cancels an existing subscription.
*/


var CancelSubscription = function(session) {
    /*
        Create a new instance of the CancelSubscription Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/CancelSubscription"
    CancelSubscription.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new CancelSubscriptionResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new CancelSubscriptionInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the CancelSubscription
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var CancelSubscriptionInputSet = function() {
    CancelSubscriptionInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the AtPeriodEnd input for this Choreo. ((optional, boolean) Delays the cancellation of the subscription until the end of the current period when set to 1. Defaults to 0.)
        */
        this.set_AtPeriodEnd = function(value) {
            this.setInput("AtPeriodEnd", value);
        }

        /*
        Set the value of the CustomerId input for this Choreo. ((string) The id of the customer whose subscription you want to cancel)
        */
        this.set_CustomerId = function(value) {
            this.setInput("CustomerId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the CancelSubscription Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var CancelSubscriptionResultSet = function(resultStream) {
    CancelSubscriptionResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(CancelSubscription, choreography.Choreography);
util.inherits(CancelSubscriptionInputSet, choreography.InputSet);
util.inherits(CancelSubscriptionResultSet, choreography.ResultSet);
exports.CancelSubscription = CancelSubscription;


/*
    CreateCardToken
    Creates a single use token associated with credit card details.
*/


var CreateCardToken = function(session) {
    /*
        Create a new instance of the CreateCardToken Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/CreateCardToken"
    CreateCardToken.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new CreateCardTokenResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new CreateCardTokenInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the CreateCardToken
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var CreateCardTokenInputSet = function() {
    CreateCardTokenInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the AddressLine1 input for this Choreo. ((optional, string) The first line of the address that is associated with the credit card billing address)
        */
        this.set_AddressLine1 = function(value) {
            this.setInput("AddressLine1", value);
        }

        /*
        Set the value of the AddressLine2 input for this Choreo. ((optional, string) The second line of the address that is associated with the credit card billing address)
        */
        this.set_AddressLine2 = function(value) {
            this.setInput("AddressLine2", value);
        }

        /*
        Set the value of the Amount input for this Choreo. ((optional, integer) The amount to charge a customer in cents. This option will guarantee that there are enough funds to satisfy a charge for this amount. )
        */
        this.set_Amount = function(value) {
            this.setInput("Amount", value);
        }

        /*
        Set the value of the CVC input for this Choreo. ((optional, integer) The 3-digit card security code )
        */
        this.set_CVC = function(value) {
            this.setInput("CVC", value);
        }

        /*
        Set the value of the CardNumber input for this Choreo. ((integer) The credit card number without any separators)
        */
        this.set_CardNumber = function(value) {
            this.setInput("CardNumber", value);
        }

        /*
        Set the value of the CardholderName input for this Choreo. ((optional, string) The cardholder's full name as it appears on the credit card)
        */
        this.set_CardholderName = function(value) {
            this.setInput("CardholderName", value);
        }

        /*
        Set the value of the Country input for this Choreo. ((optional, string) The country associated with the credit card billing address)
        */
        this.set_Country = function(value) {
            this.setInput("Country", value);
        }

        /*
        Set the value of the Currency input for this Choreo. ((optional, string) 3-letter ISO code for currency. Defaults to 'usd' which is currently the only supported currency.)
        */
        this.set_Currency = function(value) {
            this.setInput("Currency", value);
        }

        /*
        Set the value of the ExpirationMonth input for this Choreo. ((integer) The card's expiration month as a two digit number)
        */
        this.set_ExpirationMonth = function(value) {
            this.setInput("ExpirationMonth", value);
        }

        /*
        Set the value of the ExpirationYear input for this Choreo. ((integer) The card's expiration year as a 4 digit number)
        */
        this.set_ExpirationYear = function(value) {
            this.setInput("ExpirationYear", value);
        }

        /*
        Set the value of the State input for this Choreo. ((optional, string) The state of the address that is associated with the credit card billing address)
        */
        this.set_State = function(value) {
            this.setInput("State", value);
        }

        /*
        Set the value of the ZipCode input for this Choreo. ((optional, string) The zip code of the address that is associated with the credit card billing address)
        */
        this.set_ZipCode = function(value) {
            this.setInput("ZipCode", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the CreateCardToken Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var CreateCardTokenResultSet = function(resultStream) {
    CreateCardTokenResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(CreateCardToken, choreography.Choreography);
util.inherits(CreateCardTokenInputSet, choreography.InputSet);
util.inherits(CreateCardTokenResultSet, choreography.ResultSet);
exports.CreateCardToken = CreateCardToken;


/*
    CreateCoupon
    Creates a coupon that can be redeemed by customers for a discount.
*/


var CreateCoupon = function(session) {
    /*
        Create a new instance of the CreateCoupon Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/CreateCoupon"
    CreateCoupon.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new CreateCouponResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new CreateCouponInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the CreateCoupon
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var CreateCouponInputSet = function() {
    CreateCouponInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the CouponId input for this Choreo. ((optional, string) The unique identifier of your choice for the coupon. If not specified, a random code will be generated by Stripe.)
        */
        this.set_CouponId = function(value) {
            this.setInput("CouponId", value);
        }

        /*
        Set the value of the DurationInMonths input for this Choreo. ((optional, integer) If Duration is set to 'repeating', specify the number of months the discount will be valid.)
        */
        this.set_DurationInMonths = function(value) {
            this.setInput("DurationInMonths", value);
        }

        /*
        Set the value of the Duration input for this Choreo. ((string) Indicates how long the discount will be in effect. Valid values are: forever, once, repeating.)
        */
        this.set_Duration = function(value) {
            this.setInput("Duration", value);
        }

        /*
        Set the value of the MaxRedemptions input for this Choreo. ((optional, integer) Specify the number times the coupon can be used.)
        */
        this.set_MaxRedemptions = function(value) {
            this.setInput("MaxRedemptions", value);
        }

        /*
        Set the value of the PercentOff input for this Choreo. ((integer) A integer between 1 and 100 that represents the discount that the coupon will apply when used by a customer)
        */
        this.set_PercentOff = function(value) {
            this.setInput("PercentOff", value);
        }

        /*
        Set the value of the RedeemBy input for this Choreo. ((optional, date) An epoch timestamp in seconds representing the the last time at which the coupon can be used. Specify timestamp in UTC.)
        */
        this.set_RedeemBy = function(value) {
            this.setInput("RedeemBy", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the CreateCoupon Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var CreateCouponResultSet = function(resultStream) {
    CreateCouponResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(CreateCoupon, choreography.Choreography);
util.inherits(CreateCouponInputSet, choreography.InputSet);
util.inherits(CreateCouponResultSet, choreography.ResultSet);
exports.CreateCoupon = CreateCoupon;


/*
    CreateInvoiceItem
    Adds a charge or credit to the customer's next invoice.
*/


var CreateInvoiceItem = function(session) {
    /*
        Create a new instance of the CreateInvoiceItem Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/CreateInvoiceItem"
    CreateInvoiceItem.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new CreateInvoiceItemResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new CreateInvoiceItemInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the CreateInvoiceItem
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var CreateInvoiceItemInputSet = function() {
    CreateInvoiceItemInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((required, string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the Amount input for this Choreo. ((required, integer) The amount in cents of the charge to be included in the customer's next invoice)
        */
        this.set_Amount = function(value) {
            this.setInput("Amount", value);
        }

        /*
        Set the value of the Currency input for this Choreo. ((optional, string) 3-letter ISO code for currency. Defaults to 'usd' which is currently the only supported currency.)
        */
        this.set_Currency = function(value) {
            this.setInput("Currency", value);
        }

        /*
        Set the value of the CustomerId input for this Choreo. ((required, string) The unique identifier of the customer you want to create an invoice item for)
        */
        this.set_CustomerId = function(value) {
            this.setInput("CustomerId", value);
        }

        /*
        Set the value of the Description input for this Choreo. ((optional, string) An arbitrary string of text that will be included with the invoice item)
        */
        this.set_Description = function(value) {
            this.setInput("Description", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the CreateInvoiceItem Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var CreateInvoiceItemResultSet = function(resultStream) {
    CreateInvoiceItemResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(CreateInvoiceItem, choreography.Choreography);
util.inherits(CreateInvoiceItemInputSet, choreography.InputSet);
util.inherits(CreateInvoiceItemResultSet, choreography.ResultSet);
exports.CreateInvoiceItem = CreateInvoiceItem;


/*
    CreateNewChargeForExistingCustomer
    Creates a new charge object in order to charge a credit card for an existing customer.
*/


var CreateNewChargeForExistingCustomer = function(session) {
    /*
        Create a new instance of the CreateNewChargeForExistingCustomer Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/CreateNewChargeForExistingCustomer"
    CreateNewChargeForExistingCustomer.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new CreateNewChargeForExistingCustomerResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new CreateNewChargeForExistingCustomerInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the CreateNewChargeForExistingCustomer
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var CreateNewChargeForExistingCustomerInputSet = function() {
    CreateNewChargeForExistingCustomerInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the Amount input for this Choreo. ((integer) The amount to charge a customer in cents)
        */
        this.set_Amount = function(value) {
            this.setInput("Amount", value);
        }

        /*
        Set the value of the Currency input for this Choreo. ((optional, string) 3-letter ISO code for currency. Defaults to 'usd' which is currently the only supported currency.)
        */
        this.set_Currency = function(value) {
            this.setInput("Currency", value);
        }

        /*
        Set the value of the CustomerId input for this Choreo. ((string) The id for the customer to charge)
        */
        this.set_CustomerId = function(value) {
            this.setInput("CustomerId", value);
        }

        /*
        Set the value of the Description input for this Choreo. ((optional, string) An arbitrary string of text that will be associated with the charge as a description)
        */
        this.set_Description = function(value) {
            this.setInput("Description", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the CreateNewChargeForExistingCustomer Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var CreateNewChargeForExistingCustomerResultSet = function(resultStream) {
    CreateNewChargeForExistingCustomerResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(CreateNewChargeForExistingCustomer, choreography.Choreography);
util.inherits(CreateNewChargeForExistingCustomerInputSet, choreography.InputSet);
util.inherits(CreateNewChargeForExistingCustomerResultSet, choreography.ResultSet);
exports.CreateNewChargeForExistingCustomer = CreateNewChargeForExistingCustomer;


/*
    CreateNewChargeWithCreditCard
    Charges a credit card by creating a new charge object using credit card details.
*/


var CreateNewChargeWithCreditCard = function(session) {
    /*
        Create a new instance of the CreateNewChargeWithCreditCard Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/CreateNewChargeWithCreditCard"
    CreateNewChargeWithCreditCard.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new CreateNewChargeWithCreditCardResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new CreateNewChargeWithCreditCardInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the CreateNewChargeWithCreditCard
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var CreateNewChargeWithCreditCardInputSet = function() {
    CreateNewChargeWithCreditCardInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the AddressLine1 input for this Choreo. ((optional, string) The first line of the address that is associated with the credit card billing address)
        */
        this.set_AddressLine1 = function(value) {
            this.setInput("AddressLine1", value);
        }

        /*
        Set the value of the AddressLine2 input for this Choreo. ((optional, string) The second line of the address that is associated with the credit card billing address)
        */
        this.set_AddressLine2 = function(value) {
            this.setInput("AddressLine2", value);
        }

        /*
        Set the value of the Amount input for this Choreo. ((integer) The amount to charge a customer in cents)
        */
        this.set_Amount = function(value) {
            this.setInput("Amount", value);
        }

        /*
        Set the value of the CVC input for this Choreo. ((optional, integer) The 3-digit card security code)
        */
        this.set_CVC = function(value) {
            this.setInput("CVC", value);
        }

        /*
        Set the value of the CardNumber input for this Choreo. ((integer) The credit card number without any separators)
        */
        this.set_CardNumber = function(value) {
            this.setInput("CardNumber", value);
        }

        /*
        Set the value of the CardholderName input for this Choreo. ((optional, string) The cardholder's full name as it appears on the credit card)
        */
        this.set_CardholderName = function(value) {
            this.setInput("CardholderName", value);
        }

        /*
        Set the value of the Country input for this Choreo. ((optional, string) The country associated with the credit card billing address)
        */
        this.set_Country = function(value) {
            this.setInput("Country", value);
        }

        /*
        Set the value of the Currency input for this Choreo. ((optional, string) 3-letter ISO code for currency. Defaults to 'usd' which is currently the only supported currency.)
        */
        this.set_Currency = function(value) {
            this.setInput("Currency", value);
        }

        /*
        Set the value of the Description input for this Choreo. ((optional, string) An arbitrary string of text that will be associated with the charge as a description)
        */
        this.set_Description = function(value) {
            this.setInput("Description", value);
        }

        /*
        Set the value of the ExpirationMonth input for this Choreo. ((integer) The card's expiration month as a two digit number)
        */
        this.set_ExpirationMonth = function(value) {
            this.setInput("ExpirationMonth", value);
        }

        /*
        Set the value of the ExpirationYear input for this Choreo. ((integer) The card's expiration year as a 4 digit number)
        */
        this.set_ExpirationYear = function(value) {
            this.setInput("ExpirationYear", value);
        }

        /*
        Set the value of the State input for this Choreo. ((optional, string) The state of the address that is associated with the credit card billing address)
        */
        this.set_State = function(value) {
            this.setInput("State", value);
        }

        /*
        Set the value of the ZipCode input for this Choreo. ((optional, string) The zip code of the address that is associated with the credit card billing address)
        */
        this.set_ZipCode = function(value) {
            this.setInput("ZipCode", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the CreateNewChargeWithCreditCard Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var CreateNewChargeWithCreditCardResultSet = function(resultStream) {
    CreateNewChargeWithCreditCardResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(CreateNewChargeWithCreditCard, choreography.Choreography);
util.inherits(CreateNewChargeWithCreditCardInputSet, choreography.InputSet);
util.inherits(CreateNewChargeWithCreditCardResultSet, choreography.ResultSet);
exports.CreateNewChargeWithCreditCard = CreateNewChargeWithCreditCard;


/*
    CreateNewChargeWithToken
    Charges a credit card by creating a new charge object using a card token that is associated with the credit card details.
*/


var CreateNewChargeWithToken = function(session) {
    /*
        Create a new instance of the CreateNewChargeWithToken Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/CreateNewChargeWithToken"
    CreateNewChargeWithToken.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new CreateNewChargeWithTokenResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new CreateNewChargeWithTokenInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the CreateNewChargeWithToken
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var CreateNewChargeWithTokenInputSet = function() {
    CreateNewChargeWithTokenInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the Amount input for this Choreo. ((integer) The amount to charge a customer in cents)
        */
        this.set_Amount = function(value) {
            this.setInput("Amount", value);
        }

        /*
        Set the value of the Currency input for this Choreo. ((optional, string) 3-letter ISO code for currency. Defaults to 'usd' which is currently the only supported currency.)
        */
        this.set_Currency = function(value) {
            this.setInput("Currency", value);
        }

        /*
        Set the value of the Description input for this Choreo. ((optional, string) An arbitrary string of text that will be associated with the charge as a description)
        */
        this.set_Description = function(value) {
            this.setInput("Description", value);
        }

        /*
        Set the value of the Token input for this Choreo. ((string) The token associated with a set of credit card details. This can be generated with the CreateCardToken Choreo.)
        */
        this.set_Token = function(value) {
            this.setInput("Token", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the CreateNewChargeWithToken Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var CreateNewChargeWithTokenResultSet = function(resultStream) {
    CreateNewChargeWithTokenResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(CreateNewChargeWithToken, choreography.Choreography);
util.inherits(CreateNewChargeWithTokenInputSet, choreography.InputSet);
util.inherits(CreateNewChargeWithTokenResultSet, choreography.ResultSet);
exports.CreateNewChargeWithToken = CreateNewChargeWithToken;


/*
    CreateNewCustomer
    Creates a new customer record.
*/


var CreateNewCustomer = function(session) {
    /*
        Create a new instance of the CreateNewCustomer Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/CreateNewCustomer"
    CreateNewCustomer.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new CreateNewCustomerResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new CreateNewCustomerInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the CreateNewCustomer
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var CreateNewCustomerInputSet = function() {
    CreateNewCustomerInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the AddressLine1 input for this Choreo. ((optional, string) The first line of the address that is associated with the credit card billing address)
        */
        this.set_AddressLine1 = function(value) {
            this.setInput("AddressLine1", value);
        }

        /*
        Set the value of the AddressLine2 input for this Choreo. ((optional, string) The second line of the address that is associated with the credit card billing address)
        */
        this.set_AddressLine2 = function(value) {
            this.setInput("AddressLine2", value);
        }

        /*
        Set the value of the CVC input for this Choreo. ((optional, integer) The 3-digit card security code)
        */
        this.set_CVC = function(value) {
            this.setInput("CVC", value);
        }

        /*
        Set the value of the CardNumber input for this Choreo. ((optional, integer) The credit card number without any separators. Required when attaching a credit card to the customer record unless using a Token.)
        */
        this.set_CardNumber = function(value) {
            this.setInput("CardNumber", value);
        }

        /*
        Set the value of the CardholderName input for this Choreo. ((optional, string) The cardholder's full name as it appears on the credit card)
        */
        this.set_CardholderName = function(value) {
            this.setInput("CardholderName", value);
        }

        /*
        Set the value of the Country input for this Choreo. ((optional, string) The country associated with the credit card billing address)
        */
        this.set_Country = function(value) {
            this.setInput("Country", value);
        }

        /*
        Set the value of the Coupon input for this Choreo. ((optional, string) If you provide a coupon code, it can be specified here)
        */
        this.set_Coupon = function(value) {
            this.setInput("Coupon", value);
        }

        /*
        Set the value of the Description input for this Choreo. ((optional, string) An arbitrary string of text that will be associated with the customer object)
        */
        this.set_Description = function(value) {
            this.setInput("Description", value);
        }

        /*
        Set the value of the Email input for this Choreo. ((optional, string) The customer's email address)
        */
        this.set_Email = function(value) {
            this.setInput("Email", value);
        }

        /*
        Set the value of the ExpirationMonth input for this Choreo. ((optional, integer) The card's expiration month as a two digit number. Required when supplying a card number to attach to the customer.)
        */
        this.set_ExpirationMonth = function(value) {
            this.setInput("ExpirationMonth", value);
        }

        /*
        Set the value of the ExpirationYear input for this Choreo. ((optional, integer) The card's expiration year as a 4 digit number. Required when supplying a card number to attach to the customer.)
        */
        this.set_ExpirationYear = function(value) {
            this.setInput("ExpirationYear", value);
        }

        /*
        Set the value of the Plan input for this Choreo. ((optional, string) The unique identifier of the plan to subscribe the customer to)
        */
        this.set_Plan = function(value) {
            this.setInput("Plan", value);
        }

        /*
        Set the value of the State input for this Choreo. ((optional, string) The state of the address that is associated with the credit card billing address)
        */
        this.set_State = function(value) {
            this.setInput("State", value);
        }

        /*
        Set the value of the Token input for this Choreo. ((optional, string) The token associated with a set of credit card details. When a token is provided, no other credit card details are necessary.)
        */
        this.set_Token = function(value) {
            this.setInput("Token", value);
        }

        /*
        Set the value of the TrialEnd input for this Choreo. ((optional, date) Epoch timestamp in seconds for the end of the trial period. The customer won't be charged during the trial period. Timestamp should be in UTC.)
        */
        this.set_TrialEnd = function(value) {
            this.setInput("TrialEnd", value);
        }

        /*
        Set the value of the ZipCode input for this Choreo. ((optional, string) The zip code of the address that is associated with the credit card billing address)
        */
        this.set_ZipCode = function(value) {
            this.setInput("ZipCode", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the CreateNewCustomer Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var CreateNewCustomerResultSet = function(resultStream) {
    CreateNewCustomerResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(CreateNewCustomer, choreography.Choreography);
util.inherits(CreateNewCustomerInputSet, choreography.InputSet);
util.inherits(CreateNewCustomerResultSet, choreography.ResultSet);
exports.CreateNewCustomer = CreateNewCustomer;


/*
    CreatePlan
    Creates a subscription plan
*/


var CreatePlan = function(session) {
    /*
        Create a new instance of the CreatePlan Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/CreatePlan"
    CreatePlan.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new CreatePlanResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new CreatePlanInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the CreatePlan
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var CreatePlanInputSet = function() {
    CreatePlanInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the Amount input for this Choreo. ((integer) The amount in cents to charge on a recurring basis for subscribers of this plan)
        */
        this.set_Amount = function(value) {
            this.setInput("Amount", value);
        }

        /*
        Set the value of the Currency input for this Choreo. ((optional, string) 3-letter ISO code for currency. Defaults to 'usd' which is currently the only supported currency.)
        */
        this.set_Currency = function(value) {
            this.setInput("Currency", value);
        }

        /*
        Set the value of the Interval input for this Choreo. ((string) Indicates billing frequency. Valid values are: month or year.)
        */
        this.set_Interval = function(value) {
            this.setInput("Interval", value);
        }

        /*
        Set the value of the PlanId input for this Choreo. ((string) The unique identifier of the plan you want to create)
        */
        this.set_PlanId = function(value) {
            this.setInput("PlanId", value);
        }

        /*
        Set the value of the PlanName input for this Choreo. ((string) The name of the plan which will be displayed in the Stripe web interface.)
        */
        this.set_PlanName = function(value) {
            this.setInput("PlanName", value);
        }

        /*
        Set the value of the TrialPeriodDays input for this Choreo. ((optional, integer) The number of days in a trial period (customer will not be billed until the trial period is over))
        */
        this.set_TrialPeriodDays = function(value) {
            this.setInput("TrialPeriodDays", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the CreatePlan Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var CreatePlanResultSet = function(resultStream) {
    CreatePlanResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(CreatePlan, choreography.Choreography);
util.inherits(CreatePlanInputSet, choreography.InputSet);
util.inherits(CreatePlanResultSet, choreography.ResultSet);
exports.CreatePlan = CreatePlan;


/*
    DeleteCoupon
    Deletes a specified coupon.
*/


var DeleteCoupon = function(session) {
    /*
        Create a new instance of the DeleteCoupon Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/DeleteCoupon"
    DeleteCoupon.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DeleteCouponResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DeleteCouponInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DeleteCoupon
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DeleteCouponInputSet = function() {
    DeleteCouponInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the CouponId input for this Choreo. ((optional, string) The unique identifier of the coupon you wish to delete)
        */
        this.set_CouponId = function(value) {
            this.setInput("CouponId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DeleteCoupon Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DeleteCouponResultSet = function(resultStream) {
    DeleteCouponResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(DeleteCoupon, choreography.Choreography);
util.inherits(DeleteCouponInputSet, choreography.InputSet);
util.inherits(DeleteCouponResultSet, choreography.ResultSet);
exports.DeleteCoupon = DeleteCoupon;


/*
    DeleteCustomer
    Deletes a specified customer record.
*/


var DeleteCustomer = function(session) {
    /*
        Create a new instance of the DeleteCustomer Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/DeleteCustomer"
    DeleteCustomer.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DeleteCustomerResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DeleteCustomerInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DeleteCustomer
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DeleteCustomerInputSet = function() {
    DeleteCustomerInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the CustomerId input for this Choreo. ((string) The unique identifier of the customer you want to delete)
        */
        this.set_CustomerId = function(value) {
            this.setInput("CustomerId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DeleteCustomer Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DeleteCustomerResultSet = function(resultStream) {
    DeleteCustomerResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(DeleteCustomer, choreography.Choreography);
util.inherits(DeleteCustomerInputSet, choreography.InputSet);
util.inherits(DeleteCustomerResultSet, choreography.ResultSet);
exports.DeleteCustomer = DeleteCustomer;


/*
    DeleteInvoiceItem
    Deletes a specified invoice item.
*/


var DeleteInvoiceItem = function(session) {
    /*
        Create a new instance of the DeleteInvoiceItem Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/DeleteInvoiceItem"
    DeleteInvoiceItem.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DeleteInvoiceItemResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DeleteInvoiceItemInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DeleteInvoiceItem
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DeleteInvoiceItemInputSet = function() {
    DeleteInvoiceItemInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the InvoiceItemId input for this Choreo. ((string) The unique identifier of the invoice item you want to delete)
        */
        this.set_InvoiceItemId = function(value) {
            this.setInput("InvoiceItemId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DeleteInvoiceItem Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DeleteInvoiceItemResultSet = function(resultStream) {
    DeleteInvoiceItemResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(DeleteInvoiceItem, choreography.Choreography);
util.inherits(DeleteInvoiceItemInputSet, choreography.InputSet);
util.inherits(DeleteInvoiceItemResultSet, choreography.ResultSet);
exports.DeleteInvoiceItem = DeleteInvoiceItem;


/*
    DeletePlan
    Deletes a specified plan.
*/


var DeletePlan = function(session) {
    /*
        Create a new instance of the DeletePlan Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/DeletePlan"
    DeletePlan.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DeletePlanResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DeletePlanInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DeletePlan
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DeletePlanInputSet = function() {
    DeletePlanInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the PlanId input for this Choreo. ((string) The unique identifier of the plan you want to delete)
        */
        this.set_PlanId = function(value) {
            this.setInput("PlanId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DeletePlan Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DeletePlanResultSet = function(resultStream) {
    DeletePlanResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(DeletePlan, choreography.Choreography);
util.inherits(DeletePlanInputSet, choreography.InputSet);
util.inherits(DeletePlanResultSet, choreography.ResultSet);
exports.DeletePlan = DeletePlan;


/*
    ListAllCharges
    Returns a list of all charges or a list of charges for a specified customer.
*/


var ListAllCharges = function(session) {
    /*
        Create a new instance of the ListAllCharges Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/ListAllCharges"
    ListAllCharges.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new ListAllChargesResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new ListAllChargesInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the ListAllCharges
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var ListAllChargesInputSet = function() {
    ListAllChargesInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the Count input for this Choreo. ((optional, integer) The limit of charges to be returned. Can range from 1 to 100. Defaults to 10.)
        */
        this.set_Count = function(value) {
            this.setInput("Count", value);
        }

        /*
        Set the value of the CustomerId input for this Choreo. ((optional, string) The unique identifier of the customer whose charges to return. If not specified, all charges will be returned.)
        */
        this.set_CustomerId = function(value) {
            this.setInput("CustomerId", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) Stripe will return a list of charges starting at the specified offset. Defaults to 0.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the ListAllCharges Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var ListAllChargesResultSet = function(resultStream) {
    ListAllChargesResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(ListAllCharges, choreography.Choreography);
util.inherits(ListAllChargesInputSet, choreography.InputSet);
util.inherits(ListAllChargesResultSet, choreography.ResultSet);
exports.ListAllCharges = ListAllCharges;


/*
    ListAllCustomers
    Returns a list of all customers. 
*/


var ListAllCustomers = function(session) {
    /*
        Create a new instance of the ListAllCustomers Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/ListAllCustomers"
    ListAllCustomers.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new ListAllCustomersResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new ListAllCustomersInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the ListAllCustomers
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var ListAllCustomersInputSet = function() {
    ListAllCustomersInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the Count input for this Choreo. ((optional, integer) The limit of customers to be returned. Can range from 1 to 100. Defaults to 10.)
        */
        this.set_Count = function(value) {
            this.setInput("Count", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) Stripe will return a list of customers starting at the specified offset. Defaults to 0.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the ListAllCustomers Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var ListAllCustomersResultSet = function(resultStream) {
    ListAllCustomersResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(ListAllCustomers, choreography.Choreography);
util.inherits(ListAllCustomersInputSet, choreography.InputSet);
util.inherits(ListAllCustomersResultSet, choreography.ResultSet);
exports.ListAllCustomers = ListAllCustomers;


/*
    ListAllInvoiceItems
    Returns a list of all invoice items or a list of invoice items for a specified customer.
*/


var ListAllInvoiceItems = function(session) {
    /*
        Create a new instance of the ListAllInvoiceItems Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/ListAllInvoiceItems"
    ListAllInvoiceItems.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new ListAllInvoiceItemsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new ListAllInvoiceItemsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the ListAllInvoiceItems
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var ListAllInvoiceItemsInputSet = function() {
    ListAllInvoiceItemsInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the Count input for this Choreo. ((optional, integer) The limit of invoice items to be returned. Can range from 1 to 100. Defaults to 10.)
        */
        this.set_Count = function(value) {
            this.setInput("Count", value);
        }

        /*
        Set the value of the CustomerId input for this Choreo. ((optional, string) The unique identifier of the customer whose invoice items to return. If not specified, all invoice items will be returned.)
        */
        this.set_CustomerId = function(value) {
            this.setInput("CustomerId", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) Stripe will return a list of invoice items starting at the specified offset. Defaults to 0.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the ListAllInvoiceItems Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var ListAllInvoiceItemsResultSet = function(resultStream) {
    ListAllInvoiceItemsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(ListAllInvoiceItems, choreography.Choreography);
util.inherits(ListAllInvoiceItemsInputSet, choreography.InputSet);
util.inherits(ListAllInvoiceItemsResultSet, choreography.ResultSet);
exports.ListAllInvoiceItems = ListAllInvoiceItems;


/*
    ListAllInvoices
    Returns a list of all invoices or a list of invoices for a specified customer.
*/


var ListAllInvoices = function(session) {
    /*
        Create a new instance of the ListAllInvoices Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/ListAllInvoices"
    ListAllInvoices.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new ListAllInvoicesResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new ListAllInvoicesInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the ListAllInvoices
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var ListAllInvoicesInputSet = function() {
    ListAllInvoicesInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the Count input for this Choreo. ((optional, integer) The limit of invoices to be returned. Can range from 1 to 100. Defaults to 10.)
        */
        this.set_Count = function(value) {
            this.setInput("Count", value);
        }

        /*
        Set the value of the CustomerId input for this Choreo. ((optional, string) The unique identifier of the customer whose invoice to return. If not specified, all invoices will be returned.)
        */
        this.set_CustomerId = function(value) {
            this.setInput("CustomerId", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) Stripe will return a list of invoices starting at the specified offset. Defaults to 0.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the ListAllInvoices Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var ListAllInvoicesResultSet = function(resultStream) {
    ListAllInvoicesResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(ListAllInvoices, choreography.Choreography);
util.inherits(ListAllInvoicesInputSet, choreography.InputSet);
util.inherits(ListAllInvoicesResultSet, choreography.ResultSet);
exports.ListAllInvoices = ListAllInvoices;


/*
    ListAllPlans
    Returns a list of all plans. 
*/


var ListAllPlans = function(session) {
    /*
        Create a new instance of the ListAllPlans Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/ListAllPlans"
    ListAllPlans.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new ListAllPlansResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new ListAllPlansInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the ListAllPlans
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var ListAllPlansInputSet = function() {
    ListAllPlansInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the Count input for this Choreo. ((optional, integer) The limit of plans to be returned. Can range from 1 to 100. Defaults to 10.)
        */
        this.set_Count = function(value) {
            this.setInput("Count", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) Stripe will return a list of plans starting at the specified offset. Defaults to 0.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the ListAllPlans Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var ListAllPlansResultSet = function(resultStream) {
    ListAllPlansResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(ListAllPlans, choreography.Choreography);
util.inherits(ListAllPlansInputSet, choreography.InputSet);
util.inherits(ListAllPlansResultSet, choreography.ResultSet);
exports.ListAllPlans = ListAllPlans;


/*
    RefundCharge
    Issues a refund of an existing credit card charge.
*/


var RefundCharge = function(session) {
    /*
        Create a new instance of the RefundCharge Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/RefundCharge"
    RefundCharge.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new RefundChargeResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new RefundChargeInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the RefundCharge
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var RefundChargeInputSet = function() {
    RefundChargeInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the Amount input for this Choreo. ((optional, integer) The amount to refund to the customer in cents. When left empty, the entire charge is refunded.)
        */
        this.set_Amount = function(value) {
            this.setInput("Amount", value);
        }

        /*
        Set the value of the ChargeId input for this Choreo. ((string) The unique identifier of the charge to be refunded)
        */
        this.set_ChargeId = function(value) {
            this.setInput("ChargeId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the RefundCharge Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var RefundChargeResultSet = function(resultStream) {
    RefundChargeResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(RefundCharge, choreography.Choreography);
util.inherits(RefundChargeInputSet, choreography.InputSet);
util.inherits(RefundChargeResultSet, choreography.ResultSet);
exports.RefundCharge = RefundCharge;


/*
    RetrieveCardToken
    Retrieves a card token based on a given id.
*/


var RetrieveCardToken = function(session) {
    /*
        Create a new instance of the RetrieveCardToken Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/RetrieveCardToken"
    RetrieveCardToken.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new RetrieveCardTokenResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new RetrieveCardTokenInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the RetrieveCardToken
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var RetrieveCardTokenInputSet = function() {
    RetrieveCardTokenInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the TokenId input for this Choreo. ((string) The unique identifier of the token you want to retrieve)
        */
        this.set_TokenId = function(value) {
            this.setInput("TokenId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the RetrieveCardToken Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var RetrieveCardTokenResultSet = function(resultStream) {
    RetrieveCardTokenResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(RetrieveCardToken, choreography.Choreography);
util.inherits(RetrieveCardTokenInputSet, choreography.InputSet);
util.inherits(RetrieveCardTokenResultSet, choreography.ResultSet);
exports.RetrieveCardToken = RetrieveCardToken;


/*
    RetrieveCharge
    Retrieves the details of an existing charge.
*/


var RetrieveCharge = function(session) {
    /*
        Create a new instance of the RetrieveCharge Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/RetrieveCharge"
    RetrieveCharge.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new RetrieveChargeResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new RetrieveChargeInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the RetrieveCharge
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var RetrieveChargeInputSet = function() {
    RetrieveChargeInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the ChargeId input for this Choreo. ((optional, string) The unique identifier of the charge you want to retrieve)
        */
        this.set_ChargeId = function(value) {
            this.setInput("ChargeId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the RetrieveCharge Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var RetrieveChargeResultSet = function(resultStream) {
    RetrieveChargeResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(RetrieveCharge, choreography.Choreography);
util.inherits(RetrieveChargeInputSet, choreography.InputSet);
util.inherits(RetrieveChargeResultSet, choreography.ResultSet);
exports.RetrieveCharge = RetrieveCharge;


/*
    RetrieveCoupon
    Retrieves a coupon with specified coupon id.
*/


var RetrieveCoupon = function(session) {
    /*
        Create a new instance of the RetrieveCoupon Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/RetrieveCoupon"
    RetrieveCoupon.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new RetrieveCouponResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new RetrieveCouponInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the RetrieveCoupon
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var RetrieveCouponInputSet = function() {
    RetrieveCouponInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the CouponId input for this Choreo. ((optional, string) The unique identifier of the coupon you want to retrieve)
        */
        this.set_CouponId = function(value) {
            this.setInput("CouponId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the RetrieveCoupon Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var RetrieveCouponResultSet = function(resultStream) {
    RetrieveCouponResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(RetrieveCoupon, choreography.Choreography);
util.inherits(RetrieveCouponInputSet, choreography.InputSet);
util.inherits(RetrieveCouponResultSet, choreography.ResultSet);
exports.RetrieveCoupon = RetrieveCoupon;


/*
    RetrieveCustomer
    Retrieves the details of an existing customer record.
*/


var RetrieveCustomer = function(session) {
    /*
        Create a new instance of the RetrieveCustomer Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/RetrieveCustomer"
    RetrieveCustomer.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new RetrieveCustomerResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new RetrieveCustomerInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the RetrieveCustomer
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var RetrieveCustomerInputSet = function() {
    RetrieveCustomerInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the CustomerId input for this Choreo. ((optional, string) The unique identifier of the customer you want to retrieve)
        */
        this.set_CustomerId = function(value) {
            this.setInput("CustomerId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the RetrieveCustomer Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var RetrieveCustomerResultSet = function(resultStream) {
    RetrieveCustomerResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(RetrieveCustomer, choreography.Choreography);
util.inherits(RetrieveCustomerInputSet, choreography.InputSet);
util.inherits(RetrieveCustomerResultSet, choreography.ResultSet);
exports.RetrieveCustomer = RetrieveCustomer;


/*
    RetrieveInvoice
    Retrieves invoice details using the invoice id.
*/


var RetrieveInvoice = function(session) {
    /*
        Create a new instance of the RetrieveInvoice Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/RetrieveInvoice"
    RetrieveInvoice.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new RetrieveInvoiceResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new RetrieveInvoiceInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the RetrieveInvoice
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var RetrieveInvoiceInputSet = function() {
    RetrieveInvoiceInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the InvoiceId input for this Choreo. ((string) The unique identifier of the invoice you want to retrieve)
        */
        this.set_InvoiceId = function(value) {
            this.setInput("InvoiceId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the RetrieveInvoice Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var RetrieveInvoiceResultSet = function(resultStream) {
    RetrieveInvoiceResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(RetrieveInvoice, choreography.Choreography);
util.inherits(RetrieveInvoiceInputSet, choreography.InputSet);
util.inherits(RetrieveInvoiceResultSet, choreography.ResultSet);
exports.RetrieveInvoice = RetrieveInvoice;


/*
    RetrieveInvoiceItem
    Retrieves invoice items with a specified id.
*/


var RetrieveInvoiceItem = function(session) {
    /*
        Create a new instance of the RetrieveInvoiceItem Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/RetrieveInvoiceItem"
    RetrieveInvoiceItem.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new RetrieveInvoiceItemResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new RetrieveInvoiceItemInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the RetrieveInvoiceItem
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var RetrieveInvoiceItemInputSet = function() {
    RetrieveInvoiceItemInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the InvoiceItemId input for this Choreo. ((string) The unique identifier of the invoice item you want to retrieve)
        */
        this.set_InvoiceItemId = function(value) {
            this.setInput("InvoiceItemId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the RetrieveInvoiceItem Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var RetrieveInvoiceItemResultSet = function(resultStream) {
    RetrieveInvoiceItemResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(RetrieveInvoiceItem, choreography.Choreography);
util.inherits(RetrieveInvoiceItemInputSet, choreography.InputSet);
util.inherits(RetrieveInvoiceItemResultSet, choreography.ResultSet);
exports.RetrieveInvoiceItem = RetrieveInvoiceItem;


/*
    RetrievePlan
    Retrieves plan details with a specified plan id.
*/


var RetrievePlan = function(session) {
    /*
        Create a new instance of the RetrievePlan Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/RetrievePlan"
    RetrievePlan.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new RetrievePlanResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new RetrievePlanInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the RetrievePlan
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var RetrievePlanInputSet = function() {
    RetrievePlanInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the PlanId input for this Choreo. ((string) The unique identifier of the plan you want to retrieve)
        */
        this.set_PlanId = function(value) {
            this.setInput("PlanId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the RetrievePlan Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var RetrievePlanResultSet = function(resultStream) {
    RetrievePlanResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(RetrievePlan, choreography.Choreography);
util.inherits(RetrievePlanInputSet, choreography.InputSet);
util.inherits(RetrievePlanResultSet, choreography.ResultSet);
exports.RetrievePlan = RetrievePlan;


/*
    RetrieveUpcomingInvoice
    Retrieves a customer's upcoming invoice.
*/


var RetrieveUpcomingInvoice = function(session) {
    /*
        Create a new instance of the RetrieveUpcomingInvoice Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/RetrieveUpcomingInvoice"
    RetrieveUpcomingInvoice.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new RetrieveUpcomingInvoiceResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new RetrieveUpcomingInvoiceInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the RetrieveUpcomingInvoice
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var RetrieveUpcomingInvoiceInputSet = function() {
    RetrieveUpcomingInvoiceInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the CustomerId input for this Choreo. ((string) The unique identifier of the customer whose upcoming invoice to return)
        */
        this.set_CustomerId = function(value) {
            this.setInput("CustomerId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the RetrieveUpcomingInvoice Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var RetrieveUpcomingInvoiceResultSet = function(resultStream) {
    RetrieveUpcomingInvoiceResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(RetrieveUpcomingInvoice, choreography.Choreography);
util.inherits(RetrieveUpcomingInvoiceInputSet, choreography.InputSet);
util.inherits(RetrieveUpcomingInvoiceResultSet, choreography.ResultSet);
exports.RetrieveUpcomingInvoice = RetrieveUpcomingInvoice;


/*
    UpdateActiveSubscription
    Subscribes a customer to a specified plan.
*/


var UpdateActiveSubscription = function(session) {
    /*
        Create a new instance of the UpdateActiveSubscription Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/UpdateActiveSubscription"
    UpdateActiveSubscription.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new UpdateActiveSubscriptionResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new UpdateActiveSubscriptionInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the UpdateActiveSubscription
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var UpdateActiveSubscriptionInputSet = function() {
    UpdateActiveSubscriptionInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the AddressLine1 input for this Choreo. ((optional, string) The first line of the address that is associated with the credit card billing address)
        */
        this.set_AddressLine1 = function(value) {
            this.setInput("AddressLine1", value);
        }

        /*
        Set the value of the AddressLine2 input for this Choreo. ((optional, string) The second line of the address that is associated with the credit card billing address)
        */
        this.set_AddressLine2 = function(value) {
            this.setInput("AddressLine2", value);
        }

        /*
        Set the value of the CVC input for this Choreo. ((optional, integer) The 3-digit card security code)
        */
        this.set_CVC = function(value) {
            this.setInput("CVC", value);
        }

        /*
        Set the value of the CardNumber input for this Choreo. ((optional, integer) The credit card number without any separators. Required when updating credit card details.)
        */
        this.set_CardNumber = function(value) {
            this.setInput("CardNumber", value);
        }

        /*
        Set the value of the CardholderName input for this Choreo. ((optional, string) The cardholder's full name as it appears on the credit card)
        */
        this.set_CardholderName = function(value) {
            this.setInput("CardholderName", value);
        }

        /*
        Set the value of the Country input for this Choreo. ((optional, string) The country associated with the credit card billing address)
        */
        this.set_Country = function(value) {
            this.setInput("Country", value);
        }

        /*
        Set the value of the Coupon input for this Choreo. ((optional, string) If you provide a coupon code, it can be specified here)
        */
        this.set_Coupon = function(value) {
            this.setInput("Coupon", value);
        }

        /*
        Set the value of the CustomerId input for this Choreo. ((string) The unique identifier of the customer you want to subscribe to a plan)
        */
        this.set_CustomerId = function(value) {
            this.setInput("CustomerId", value);
        }

        /*
        Set the value of the ExpirationMonth input for this Choreo. ((optional, integer) The card's expiration month as a two digit number. Required when updating credit card details.)
        */
        this.set_ExpirationMonth = function(value) {
            this.setInput("ExpirationMonth", value);
        }

        /*
        Set the value of the ExpirationYear input for this Choreo. ((optional, integer) The card's expiration year as a four digit number. Required when updating credit card details.)
        */
        this.set_ExpirationYear = function(value) {
            this.setInput("ExpirationYear", value);
        }

        /*
        Set the value of the Plan input for this Choreo. ((string) The unique identifier of the plan to subscribe the customer to)
        */
        this.set_Plan = function(value) {
            this.setInput("Plan", value);
        }

        /*
        Set the value of the Prorate input for this Choreo. ((optional, boolean) When set to 1, Stripe will prorate switching plans during a billing cycle. When set to 0, this feature is disabled. Defaults to 1.)
        */
        this.set_Prorate = function(value) {
            this.setInput("Prorate", value);
        }

        /*
        Set the value of the State input for this Choreo. ((optional, string) The state of the address that is associated with the credit card billing address)
        */
        this.set_State = function(value) {
            this.setInput("State", value);
        }

        /*
        Set the value of the Token input for this Choreo. ((optional, string) The token associated with a set of credit card details. This can be used as an alternative to specifying credit card details.)
        */
        this.set_Token = function(value) {
            this.setInput("Token", value);
        }

        /*
        Set the value of the TrialEnd input for this Choreo. ((optional, date) A timestamp representing the end of the trial period in UTC. The customer will not be charged during the trial period.)
        */
        this.set_TrialEnd = function(value) {
            this.setInput("TrialEnd", value);
        }

        /*
        Set the value of the ZipCode input for this Choreo. ((optional, string) The zip code of the address that is associated with the credit card billing address)
        */
        this.set_ZipCode = function(value) {
            this.setInput("ZipCode", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the UpdateActiveSubscription Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var UpdateActiveSubscriptionResultSet = function(resultStream) {
    UpdateActiveSubscriptionResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(UpdateActiveSubscription, choreography.Choreography);
util.inherits(UpdateActiveSubscriptionInputSet, choreography.InputSet);
util.inherits(UpdateActiveSubscriptionResultSet, choreography.ResultSet);
exports.UpdateActiveSubscription = UpdateActiveSubscription;


/*
    UpdateCustomer
    Updates a specified customer record.
*/


var UpdateCustomer = function(session) {
    /*
        Create a new instance of the UpdateCustomer Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/UpdateCustomer"
    UpdateCustomer.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new UpdateCustomerResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new UpdateCustomerInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the UpdateCustomer
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var UpdateCustomerInputSet = function() {
    UpdateCustomerInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the AddressLine1 input for this Choreo. ((optional, string) The first line of the address that is associated with the credit card billing address)
        */
        this.set_AddressLine1 = function(value) {
            this.setInput("AddressLine1", value);
        }

        /*
        Set the value of the AddressLine2 input for this Choreo. ((optional, string) The second line of the address that is associated with the credit card billing address)
        */
        this.set_AddressLine2 = function(value) {
            this.setInput("AddressLine2", value);
        }

        /*
        Set the value of the CVC input for this Choreo. ((optional, integer) The 3-digit card security code)
        */
        this.set_CVC = function(value) {
            this.setInput("CVC", value);
        }

        /*
        Set the value of the CardNumber input for this Choreo. ((optional, integer) The credit card number without any separators. Required when updating credit card details.)
        */
        this.set_CardNumber = function(value) {
            this.setInput("CardNumber", value);
        }

        /*
        Set the value of the CardholderName input for this Choreo. ((optional, string) The cardholder's full name as it appears on the credit card)
        */
        this.set_CardholderName = function(value) {
            this.setInput("CardholderName", value);
        }

        /*
        Set the value of the Country input for this Choreo. ((optional, string) The country associated with the credit card billing address)
        */
        this.set_Country = function(value) {
            this.setInput("Country", value);
        }

        /*
        Set the value of the Coupon input for this Choreo. ((optional, string) If you provide a coupon code, it can be specified here)
        */
        this.set_Coupon = function(value) {
            this.setInput("Coupon", value);
        }

        /*
        Set the value of the CustomerId input for this Choreo. ((string) The unique identifier of the customer you want to update)
        */
        this.set_CustomerId = function(value) {
            this.setInput("CustomerId", value);
        }

        /*
        Set the value of the Description input for this Choreo. ((optional, string) An arbitrary string of text that will be associated with the charge as a description)
        */
        this.set_Description = function(value) {
            this.setInput("Description", value);
        }

        /*
        Set the value of the Email input for this Choreo. ((optional, string) The customer's email address)
        */
        this.set_Email = function(value) {
            this.setInput("Email", value);
        }

        /*
        Set the value of the ExpirationMonth input for this Choreo. ((optional, integer) The card's expiration month as a two digit number. Required when updating credit card details.)
        */
        this.set_ExpirationMonth = function(value) {
            this.setInput("ExpirationMonth", value);
        }

        /*
        Set the value of the ExpirationYear input for this Choreo. ((optional, integer) The card's expiration year as a four digit number. Required when updating credit card details.)
        */
        this.set_ExpirationYear = function(value) {
            this.setInput("ExpirationYear", value);
        }

        /*
        Set the value of the State input for this Choreo. ((optional, string) The state of the address that is associated with the credit card billing address)
        */
        this.set_State = function(value) {
            this.setInput("State", value);
        }

        /*
        Set the value of the Token input for this Choreo. ((optional, string) The token associated with a set of credit card details. When a token is provided, no other credit card details are necessary.)
        */
        this.set_Token = function(value) {
            this.setInput("Token", value);
        }

        /*
        Set the value of the ZipCode input for this Choreo. ((optional, string) The zip code of the address that is associated with the credit card billing address)
        */
        this.set_ZipCode = function(value) {
            this.setInput("ZipCode", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the UpdateCustomer Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var UpdateCustomerResultSet = function(resultStream) {
    UpdateCustomerResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(UpdateCustomer, choreography.Choreography);
util.inherits(UpdateCustomerInputSet, choreography.InputSet);
util.inherits(UpdateCustomerResultSet, choreography.ResultSet);
exports.UpdateCustomer = UpdateCustomer;


/*
    UpdateInvoiceItem
    Updates the amount or description of an existing invoice item.
*/


var UpdateInvoiceItem = function(session) {
    /*
        Create a new instance of the UpdateInvoiceItem Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Stripe/UpdateInvoiceItem"
    UpdateInvoiceItem.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new UpdateInvoiceItemResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new UpdateInvoiceItemInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the UpdateInvoiceItem
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var UpdateInvoiceItemInputSet = function() {
    UpdateInvoiceItemInputSet.super_.call(this);
        /*
        Set the value of the APISecretKey input for this Choreo. ((required, string) The secret API Key providied by Stripe)
        */
        this.set_APISecretKey = function(value) {
            this.setInput("APISecretKey", value);
        }

        /*
        Set the value of the Amount input for this Choreo. ((required, integer) The amount in cents of the charge to be included in the customer's next invoice)
        */
        this.set_Amount = function(value) {
            this.setInput("Amount", value);
        }

        /*
        Set the value of the Currency input for this Choreo. ((optional, string) 3-letter ISO code for currency. Defaults to 'usd' which is currently the only supported currency.)
        */
        this.set_Currency = function(value) {
            this.setInput("Currency", value);
        }

        /*
        Set the value of the Description input for this Choreo. ((optional, string) An arbitrary string of text that will be included with the invoice item)
        */
        this.set_Description = function(value) {
            this.setInput("Description", value);
        }

        /*
        Set the value of the InvoiceItemId input for this Choreo. ((required, string) The unique identifier of the invoice item you want to update)
        */
        this.set_InvoiceItemId = function(value) {
            this.setInput("InvoiceItemId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the UpdateInvoiceItem Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var UpdateInvoiceItemResultSet = function(resultStream) {
    UpdateInvoiceItemResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Stripe)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(UpdateInvoiceItem, choreography.Choreography);
util.inherits(UpdateInvoiceItemInputSet, choreography.InputSet);
util.inherits(UpdateInvoiceItemResultSet, choreography.ResultSet);
exports.UpdateInvoiceItem = UpdateInvoiceItem;




/******************************************************************************
Begin output wrapper classes
******************************************************************************/

/**
 * Utility function, to retrieve the array-type sub-item specified by the key from the parent (array) specified by the item.
 * Returns an empty array if key is not present.
 */
function getSubArrayByKey(item, key) {
	var val = item[key];
	if(val == null) {
		val = new Array();
	}
	return val;
}


