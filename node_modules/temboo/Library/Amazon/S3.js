
var util = require("util");
var choreography = require("temboo/core/choreography");


/*
    CopyObject
    Makes a copy of an existing object in S3 Storage.
*/


var CopyObject = function(session) {
    /*
        Create a new instance of the CopyObject Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/S3/CopyObject"
    CopyObject.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new CopyObjectResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new CopyObjectInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the CopyObject
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var CopyObjectInputSet = function() {
    CopyObjectInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the BucketName input for this Choreo. ((required, string) The name of the bucket that will be the file destination.)
        */
        this.set_BucketName = function(value) {
            this.setInput("BucketName", value);
        }

        /*
        Set the value of the FileToCopy input for this Choreo. ((required, string) The name of the file to copy.)
        */
        this.set_FileToCopy = function(value) {
            this.setInput("FileToCopy", value);
        }

        /*
        Set the value of the NewFileName input for this Choreo. ((required, string) The file name for the new copy.)
        */
        this.set_NewFileName = function(value) {
            this.setInput("NewFileName", value);
        }

        /*
        Set the value of the VaultFile input for this Choreo. ((optional, vault file) The path to a vault file that you want to upload to an Amazon S3 bucket. Required unless using the FileContents input variable.)
        */

}

/*
A ResultSet with methods tailored to the values returned by the CopyObject Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var CopyObjectResultSet = function(resultStream) {
    CopyObjectResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon. Note that no content is returned for successful uploads.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(CopyObject, choreography.Choreography);
util.inherits(CopyObjectInputSet, choreography.InputSet);
util.inherits(CopyObjectResultSet, choreography.ResultSet);
exports.CopyObject = CopyObject;


/*
    DeleteBucket
    Deletes a bucket from your Amazon S3 account.
*/


var DeleteBucket = function(session) {
    /*
        Create a new instance of the DeleteBucket Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/S3/DeleteBucket"
    DeleteBucket.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DeleteBucketResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DeleteBucketInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DeleteBucket
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DeleteBucketInputSet = function() {
    DeleteBucketInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the BucketName input for this Choreo. ((required, string) The name of the bucket that will be the file destination.)
        */
        this.set_BucketName = function(value) {
            this.setInput("BucketName", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DeleteBucket Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DeleteBucketResultSet = function(resultStream) {
    DeleteBucketResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon. Note that no content is returned for successful deletions.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(DeleteBucket, choreography.Choreography);
util.inherits(DeleteBucketInputSet, choreography.InputSet);
util.inherits(DeleteBucketResultSet, choreography.ResultSet);
exports.DeleteBucket = DeleteBucket;


/*
    DeleteBucketLifecycle
    Deletes the lifecycle configuration from the specified bucket.
*/


var DeleteBucketLifecycle = function(session) {
    /*
        Create a new instance of the DeleteBucketLifecycle Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/S3/DeleteBucketLifecycle"
    DeleteBucketLifecycle.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DeleteBucketLifecycleResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DeleteBucketLifecycleInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DeleteBucketLifecycle
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DeleteBucketLifecycleInputSet = function() {
    DeleteBucketLifecycleInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the BucketName input for this Choreo. ((required, string) The name of the bucket associated with the lifecycle you want to delete.)
        */
        this.set_BucketName = function(value) {
            this.setInput("BucketName", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DeleteBucketLifecycle Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DeleteBucketLifecycleResultSet = function(resultStream) {
    DeleteBucketLifecycleResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) Stores the response from Amazon. Note that for a successful delete operation, no content is returned, and this output variable should be empty.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(DeleteBucketLifecycle, choreography.Choreography);
util.inherits(DeleteBucketLifecycleInputSet, choreography.InputSet);
util.inherits(DeleteBucketLifecycleResultSet, choreography.ResultSet);
exports.DeleteBucketLifecycle = DeleteBucketLifecycle;


/*
    DeleteBucketPolicy
    Deletes the policy on a specified bucket.
*/


var DeleteBucketPolicy = function(session) {
    /*
        Create a new instance of the DeleteBucketPolicy Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/S3/DeleteBucketPolicy"
    DeleteBucketPolicy.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DeleteBucketPolicyResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DeleteBucketPolicyInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DeleteBucketPolicy
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DeleteBucketPolicyInputSet = function() {
    DeleteBucketPolicyInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the BucketName input for this Choreo. ((required, string) The name of the bucket associated with the policy you want to delete.)
        */
        this.set_BucketName = function(value) {
            this.setInput("BucketName", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DeleteBucketPolicy Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DeleteBucketPolicyResultSet = function(resultStream) {
    DeleteBucketPolicyResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) Stores the response from Amazon. Note that for a successful delete operation, no content is returned, and this output variable should be empty.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(DeleteBucketPolicy, choreography.Choreography);
util.inherits(DeleteBucketPolicyInputSet, choreography.InputSet);
util.inherits(DeleteBucketPolicyResultSet, choreography.ResultSet);
exports.DeleteBucketPolicy = DeleteBucketPolicy;


/*
    DeleteMultipleObjects
    Deletes multiple objects from an S3 Bucket.
*/


var DeleteMultipleObjects = function(session) {
    /*
        Create a new instance of the DeleteMultipleObjects Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/S3/DeleteMultipleObjects"
    DeleteMultipleObjects.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DeleteMultipleObjectsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DeleteMultipleObjectsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DeleteMultipleObjects
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DeleteMultipleObjectsInputSet = function() {
    DeleteMultipleObjectsInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the BucketName input for this Choreo. ((required, string) The the name of the bucket that contains the objects that you want to delete.)
        */
        this.set_BucketName = function(value) {
            this.setInput("BucketName", value);
        }

        /*
        Set the value of the FileNames input for this Choreo. ((required, string) A list of file names to delete (separated by commas).)
        */
        this.set_FileNames = function(value) {
            this.setInput("FileNames", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DeleteMultipleObjects Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DeleteMultipleObjectsResultSet = function(resultStream) {
    DeleteMultipleObjectsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon. Note that no content is returned for a successful delete operation.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(DeleteMultipleObjects, choreography.Choreography);
util.inherits(DeleteMultipleObjectsInputSet, choreography.InputSet);
util.inherits(DeleteMultipleObjectsResultSet, choreography.ResultSet);
exports.DeleteMultipleObjects = DeleteMultipleObjects;


/*
    DeleteObject
    Deletes a specified item from an Amazon S3 bucket.
*/


var DeleteObject = function(session) {
    /*
        Create a new instance of the DeleteObject Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/S3/DeleteObject"
    DeleteObject.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DeleteObjectResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DeleteObjectInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DeleteObject
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DeleteObjectInputSet = function() {
    DeleteObjectInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the BucketName input for this Choreo. ((required, string) The the name of the bucket that contains the object that you want to delete.)
        */
        this.set_BucketName = function(value) {
            this.setInput("BucketName", value);
        }

        /*
        Set the value of the FileName input for this Choreo. ((required, string) The file name that you want to delete.)
        */
        this.set_FileName = function(value) {
            this.setInput("FileName", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DeleteObject Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DeleteObjectResultSet = function(resultStream) {
    DeleteObjectResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon. Note that no content is returned for a successful delete operation.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(DeleteObject, choreography.Choreography);
util.inherits(DeleteObjectInputSet, choreography.InputSet);
util.inherits(DeleteObjectResultSet, choreography.ResultSet);
exports.DeleteObject = DeleteObject;


/*
    GetBase64EncodedObject
    Retrieves a specified item from an Amazon S3 bucket, and returns the file content as base64-encoded data.
*/


var GetBase64EncodedObject = function(session) {
    /*
        Create a new instance of the GetBase64EncodedObject Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/S3/GetBase64EncodedObject"
    GetBase64EncodedObject.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GetBase64EncodedObjectResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GetBase64EncodedObjectInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the GetBase64EncodedObject
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GetBase64EncodedObjectInputSet = function() {
    GetBase64EncodedObjectInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the BucketName input for this Choreo. ((required, string) The name of the bucket that contains the object to retrieve.)
        */
        this.set_BucketName = function(value) {
            this.setInput("BucketName", value);
        }

        /*
        Set the value of the FileName input for this Choreo. ((required, string) The name of the file to retrieve.)
        */
        this.set_FileName = function(value) {
            this.setInput("FileName", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the GetBase64EncodedObject Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GetBase64EncodedObjectResultSet = function(resultStream) {
    GetBase64EncodedObjectResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((string) The base64-encoded contents of the file you are retrieving.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(GetBase64EncodedObject, choreography.Choreography);
util.inherits(GetBase64EncodedObjectInputSet, choreography.InputSet);
util.inherits(GetBase64EncodedObjectResultSet, choreography.ResultSet);
exports.GetBase64EncodedObject = GetBase64EncodedObject;


/*
    GetBucketACL
    Returns the access control list (ACL) of a bucket.
*/


var GetBucketACL = function(session) {
    /*
        Create a new instance of the GetBucketACL Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/S3/GetBucketACL"
    GetBucketACL.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GetBucketACLResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GetBucketACLInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the GetBucketACL
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GetBucketACLInputSet = function() {
    GetBucketACLInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the BucketName input for this Choreo. ((required, string) The name of the bucket associated with the ACL you want to retrieve.)
        */
        this.set_BucketName = function(value) {
            this.setInput("BucketName", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the GetBucketACL Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GetBucketACLResultSet = function(resultStream) {
    GetBucketACLResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((json) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(GetBucketACL, choreography.Choreography);
util.inherits(GetBucketACLInputSet, choreography.InputSet);
util.inherits(GetBucketACLResultSet, choreography.ResultSet);
exports.GetBucketACL = GetBucketACL;


/*
    GetBucketLifecycle
    Returns the lifecycle configuration information set on the bucket.
*/


var GetBucketLifecycle = function(session) {
    /*
        Create a new instance of the GetBucketLifecycle Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/S3/GetBucketLifecycle"
    GetBucketLifecycle.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GetBucketLifecycleResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GetBucketLifecycleInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the GetBucketLifecycle
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GetBucketLifecycleInputSet = function() {
    GetBucketLifecycleInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the BucketName input for this Choreo. ((required, string) The name of the bucket associated with the lifecycle you want to retrieve.)
        */
        this.set_BucketName = function(value) {
            this.setInput("BucketName", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the GetBucketLifecycle Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GetBucketLifecycleResultSet = function(resultStream) {
    GetBucketLifecycleResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((json) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(GetBucketLifecycle, choreography.Choreography);
util.inherits(GetBucketLifecycleInputSet, choreography.InputSet);
util.inherits(GetBucketLifecycleResultSet, choreography.ResultSet);
exports.GetBucketLifecycle = GetBucketLifecycle;


/*
    GetBucketList
    Retrieves a list of the items that are in a specified Amazon S3 storage bucket, and returns the list information in XML format.
*/


var GetBucketList = function(session) {
    /*
        Create a new instance of the GetBucketList Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/S3/GetBucketList"
    GetBucketList.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GetBucketListResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GetBucketListInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the GetBucketList
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GetBucketListInputSet = function() {
    GetBucketListInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the BucketName input for this Choreo. ((required, string) The name of the bucket that contains the list of objects that you want to retrieve.)
        */
        this.set_BucketName = function(value) {
            this.setInput("BucketName", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the GetBucketList Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GetBucketListResultSet = function(resultStream) {
    GetBucketListResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(GetBucketList, choreography.Choreography);
util.inherits(GetBucketListInputSet, choreography.InputSet);
util.inherits(GetBucketListResultSet, choreography.ResultSet);
exports.GetBucketList = GetBucketList;


/*
    GetBucketPolicy
    Returns the policy of a specified bucket.
*/


var GetBucketPolicy = function(session) {
    /*
        Create a new instance of the GetBucketPolicy Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/S3/GetBucketPolicy"
    GetBucketPolicy.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GetBucketPolicyResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GetBucketPolicyInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the GetBucketPolicy
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GetBucketPolicyInputSet = function() {
    GetBucketPolicyInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the BucketName input for this Choreo. ((required, string) The name of the bucket associated with the policy you want to retrieve.)
        */
        this.set_BucketName = function(value) {
            this.setInput("BucketName", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the GetBucketPolicy Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GetBucketPolicyResultSet = function(resultStream) {
    GetBucketPolicyResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((json) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(GetBucketPolicy, choreography.Choreography);
util.inherits(GetBucketPolicyInputSet, choreography.InputSet);
util.inherits(GetBucketPolicyResultSet, choreography.ResultSet);
exports.GetBucketPolicy = GetBucketPolicy;


/*
    GetObjectTorrent
    Returns torrent files from an Amazon S3 bucket.t
*/


var GetObjectTorrent = function(session) {
    /*
        Create a new instance of the GetObjectTorrent Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/S3/GetObjectTorrent"
    GetObjectTorrent.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GetObjectTorrentResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GetObjectTorrentInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the GetObjectTorrent
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GetObjectTorrentInputSet = function() {
    GetObjectTorrentInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the BucketName input for this Choreo. ((required, string) The name of the bucket that contains the object to retrieve.)
        */
        this.set_BucketName = function(value) {
            this.setInput("BucketName", value);
        }

        /*
        Set the value of the FileName input for this Choreo. ((required, string) The name of the torrent file to retrieve.)
        */
        this.set_FileName = function(value) {
            this.setInput("FileName", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the GetObjectTorrent Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GetObjectTorrentResultSet = function(resultStream) {
    GetObjectTorrentResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The retrieved file. A Bencoded dictionary as defined by the BitTorrent specification.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(GetObjectTorrent, choreography.Choreography);
util.inherits(GetObjectTorrentInputSet, choreography.InputSet);
util.inherits(GetObjectTorrentResultSet, choreography.ResultSet);
exports.GetObjectTorrent = GetObjectTorrent;


/*
    PutBucket
    Creates a new bucket in your Amazon S3 account.
*/


var PutBucket = function(session) {
    /*
        Create a new instance of the PutBucket Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/S3/PutBucket"
    PutBucket.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new PutBucketResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new PutBucketInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the PutBucket
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var PutBucketInputSet = function() {
    PutBucketInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the BucketName input for this Choreo. ((required, string) The name of the bucket that will be created.)
        */
        this.set_BucketName = function(value) {
            this.setInput("BucketName", value);
        }

        /*
        Set the value of the LocationConstraint input for this Choreo. ((optional, string) The region to create the bucket in. Valid Values: EU, us-west-1, ap-southeast-1, ap-northeast-1. Defaults to US Classic Region when empty.)
        */
        this.set_LocationConstraint = function(value) {
            this.setInput("LocationConstraint", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the PutBucket Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var PutBucketResultSet = function(resultStream) {
    PutBucketResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon. Note that no content is returned for successful uploads.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(PutBucket, choreography.Choreography);
util.inherits(PutBucketInputSet, choreography.InputSet);
util.inherits(PutBucketResultSet, choreography.ResultSet);
exports.PutBucket = PutBucket;


/*
    PutBucketACL
    Sets the access control list (ACL) permissions for an existing bucket.
*/


var PutBucketACL = function(session) {
    /*
        Create a new instance of the PutBucketACL Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/S3/PutBucketACL"
    PutBucketACL.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new PutBucketACLResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new PutBucketACLInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the PutBucketACL
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var PutBucketACLInputSet = function() {
    PutBucketACLInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the BucketName input for this Choreo. ((required, string) The name of the bucket to create or update a policy for.)
        */
        this.set_BucketName = function(value) {
            this.setInput("BucketName", value);
        }

        /*
        Set the value of the GranteeEmailAddress input for this Choreo. ((required, string) The email address of the grantee.)
        */
        this.set_GranteeEmailAddress = function(value) {
            this.setInput("GranteeEmailAddress", value);
        }

        /*
        Set the value of the GranteeId input for this Choreo. ((required, string) The canonical user id of the grantee.)
        */
        this.set_GranteeId = function(value) {
            this.setInput("GranteeId", value);
        }

        /*
        Set the value of the OwnerEmailAddress input for this Choreo. ((required, string) The email address of the owner who is granting permission.)
        */
        this.set_OwnerEmailAddress = function(value) {
            this.setInput("OwnerEmailAddress", value);
        }

        /*
        Set the value of the OwnerId input for this Choreo. ((required, string) The canonical user id of the owner who is granting permission.)
        */
        this.set_OwnerId = function(value) {
            this.setInput("OwnerId", value);
        }

        /*
        Set the value of the Permission input for this Choreo. ((required, string) The permission you are granting (i.e. FULL_CONTROL).)
        */
        this.set_Permission = function(value) {
            this.setInput("Permission", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the PutBucketACL Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var PutBucketACLResultSet = function(resultStream) {
    PutBucketACLResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) Stores the response from Amazon. Note that for a successful ACL creation, no content is returned and this output variable should be empty.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(PutBucketACL, choreography.Choreography);
util.inherits(PutBucketACLInputSet, choreography.InputSet);
util.inherits(PutBucketACLResultSet, choreography.ResultSet);
exports.PutBucketACL = PutBucketACL;


/*
    PutBucketLifecycle
    Sets lifecycle configuration for your bucket. This is used to remove objects from a bucket automatically after a certain time.
*/


var PutBucketLifecycle = function(session) {
    /*
        Create a new instance of the PutBucketLifecycle Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/S3/PutBucketLifecycle"
    PutBucketLifecycle.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new PutBucketLifecycleResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new PutBucketLifecycleInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the PutBucketLifecycle
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var PutBucketLifecycleInputSet = function() {
    PutBucketLifecycleInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the BucketName input for this Choreo. ((required, string) The name of the bucket to create or update a policy for.)
        */
        this.set_BucketName = function(value) {
            this.setInput("BucketName", value);
        }

        /*
        Set the value of the LifecycleId input for this Choreo. ((optional, string) A unique ID for this lifecycle (i.e. delete-logs-in-30-days-rule).)
        */
        this.set_LifecycleId = function(value) {
            this.setInput("LifecycleId", value);
        }

        /*
        Set the value of the NumberOfDays input for this Choreo. ((required, integer) The number of days until this lifecycle expires.)
        */
        this.set_NumberOfDays = function(value) {
            this.setInput("NumberOfDays", value);
        }

        /*
        Set the value of the Prefix input for this Choreo. ((optional, string) Indicating that objects with this prefix will expire and be removed after the number of days specified. If not specified this lifecycle will apply to all objects in the bucket.)
        */
        this.set_Prefix = function(value) {
            this.setInput("Prefix", value);
        }

        /*
        Set the value of the Status input for this Choreo. ((optional, string) The lifecycle status. Accepted values are: "Enabled" or "Disabled". Defaults to "Enabled".)
        */
        this.set_Status = function(value) {
            this.setInput("Status", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the PutBucketLifecycle Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var PutBucketLifecycleResultSet = function(resultStream) {
    PutBucketLifecycleResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) Stores the response from Amazon. Note that for a successful lifecycle creation, no content is returned and this output variable should be empty.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(PutBucketLifecycle, choreography.Choreography);
util.inherits(PutBucketLifecycleInputSet, choreography.InputSet);
util.inherits(PutBucketLifecycleResultSet, choreography.ResultSet);
exports.PutBucketLifecycle = PutBucketLifecycle;


/*
    PutBucketPolicy
    Allows you to add to or replace a policy on a bucket.
*/


var PutBucketPolicy = function(session) {
    /*
        Create a new instance of the PutBucketPolicy Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/S3/PutBucketPolicy"
    PutBucketPolicy.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new PutBucketPolicyResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new PutBucketPolicyInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the PutBucketPolicy
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var PutBucketPolicyInputSet = function() {
    PutBucketPolicyInputSet.super_.call(this);
        /*
        Set the value of the Policy input for this Choreo. ((required, json) A JSON string containing the policy information.  See Choreo documentation for a sample JSON policy.)
        */
        this.set_Policy = function(value) {
            this.setInput("Policy", value);
        }

        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the BucketName input for this Choreo. ((required, string) The name of the bucket to create or update a policy for.)
        */
        this.set_BucketName = function(value) {
            this.setInput("BucketName", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the PutBucketPolicy Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var PutBucketPolicyResultSet = function(resultStream) {
    PutBucketPolicyResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) Stores the response from Amazon. Note that for a successful policy creation, no content is returned and this output variable should be empty.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(PutBucketPolicy, choreography.Choreography);
util.inherits(PutBucketPolicyInputSet, choreography.InputSet);
util.inherits(PutBucketPolicyResultSet, choreography.ResultSet);
exports.PutBucketPolicy = PutBucketPolicy;


/*
    PutObject
    Uploads a file to your Amazon S3 storage bucket.
*/


var PutObject = function(session) {
    /*
        Create a new instance of the PutObject Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/S3/PutObject"
    PutObject.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new PutObjectResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new PutObjectInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the PutObject
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var PutObjectInputSet = function() {
    PutObjectInputSet.super_.call(this);
        /*
        Set the value of the FileContents input for this Choreo. ((conditional, string) The base64 encoded file contents that you want to upload to an AmazonS3 bucket. Required unless using the VaultFile input alias (an advanced option when using the Temboo Designer to execute Choreos).)
        */
        this.set_FileContents = function(value) {
            this.setInput("FileContents", value);
        }

        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the BucketName input for this Choreo. ((required, string) The name of the bucket that will be the file destination.)
        */
        this.set_BucketName = function(value) {
            this.setInput("BucketName", value);
        }

        /*
        Set the value of the FileName input for this Choreo. ((required, string) The name of the file to put in S3 Storage.)
        */
        this.set_FileName = function(value) {
            this.setInput("FileName", value);
        }

        /*
        Set the value of the VaultFile input for this Choreo. ((optional, vault file) The path to a vault file that you want to upload to an Amazon S3 bucket. Required unless using the FileContents input variable.)
        */

}

/*
A ResultSet with methods tailored to the values returned by the PutObject Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var PutObjectResultSet = function(resultStream) {
    PutObjectResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon. Note that no content is returned for successful uploads.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(PutObject, choreography.Choreography);
util.inherits(PutObjectInputSet, choreography.InputSet);
util.inherits(PutObjectResultSet, choreography.ResultSet);
exports.PutObject = PutObject;




/******************************************************************************
Begin output wrapper classes
******************************************************************************/

/**
 * Utility function, to retrieve the array-type sub-item specified by the key from the parent (array) specified by the item.
 * Returns an empty array if key is not present.
 */
function getSubArrayByKey(item, key) {
	var val = item[key];
	if(val == null) {
		val = new Array();
	}
	return val;
}


