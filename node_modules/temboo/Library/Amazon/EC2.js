
var util = require("util");
var choreography = require("temboo/core/choreography");


/*
    AttachVolume
    Attaches an Amazon EBS volume to a running instance and exposes it as the specified device.
*/


var AttachVolume = function(session) {
    /*
        Create a new instance of the AttachVolume Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/EC2/AttachVolume"
    AttachVolume.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new AttachVolumeResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new AttachVolumeInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the AttachVolume
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var AttachVolumeInputSet = function() {
    AttachVolumeInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the Device input for this Choreo. ((required, string) How the device is exposed to the instance (i.e. " /dev/sdh" or "xvdh").)
        */
        this.set_Device = function(value) {
            this.setInput("Device", value);
        }

        /*
        Set the value of the InstanceId input for this Choreo. ((required, string) The ID of the instance to which the volume attaches. The volume and instance must be within the same Availability Zone and the instance must be running.)
        */
        this.set_InstanceId = function(value) {
            this.setInput("InstanceId", value);
        }

        /*
        Set the value of the VolumeId input for this Choreo. ((required, string) The ID of the Amazon EBS volume. The volume and instance must be within the same Availability Zone and the instance must be running.)
        */
        this.set_VolumeId = function(value) {
            this.setInput("VolumeId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the AttachVolume Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var AttachVolumeResultSet = function(resultStream) {
    AttachVolumeResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(AttachVolume, choreography.Choreography);
util.inherits(AttachVolumeInputSet, choreography.InputSet);
util.inherits(AttachVolumeResultSet, choreography.ResultSet);
exports.AttachVolume = AttachVolume;


/*
    CreateImage
    Creates an Amazon Machine Image from an Amazon EBS-backed instance. The image can be used later to launch other identical servers.
*/


var CreateImage = function(session) {
    /*
        Create a new instance of the CreateImage Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/EC2/CreateImage"
    CreateImage.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new CreateImageResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new CreateImageInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the CreateImage
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var CreateImageInputSet = function() {
    CreateImageInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the Description input for this Choreo. ((optional, string) A description for the image you want to create.)
        */
        this.set_Description = function(value) {
            this.setInput("Description", value);
        }

        /*
        Set the value of the InstanceId input for this Choreo. ((required, string) The ID of the instance to create the image on.)
        */
        this.set_InstanceId = function(value) {
            this.setInput("InstanceId", value);
        }

        /*
        Set the value of the Name input for this Choreo. ((required, string) The name for the image you are creating.)
        */
        this.set_Name = function(value) {
            this.setInput("Name", value);
        }

        /*
        Set the value of the NoReboot input for this Choreo. ((optional, boolean) Defaults to false. Amazon EC2 will attempt to shut down the instance before and after creating the image. Set to 1 for NoReboot.)
        */
        this.set_NoReboot = function(value) {
            this.setInput("NoReboot", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the CreateImage Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var CreateImageResultSet = function(resultStream) {
    CreateImageResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(CreateImage, choreography.Choreography);
util.inherits(CreateImageInputSet, choreography.InputSet);
util.inherits(CreateImageResultSet, choreography.ResultSet);
exports.CreateImage = CreateImage;


/*
    CreateSecurityGroup
    Creates a new EC2 security group.
*/


var CreateSecurityGroup = function(session) {
    /*
        Create a new instance of the CreateSecurityGroup Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/EC2/CreateSecurityGroup"
    CreateSecurityGroup.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new CreateSecurityGroupResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new CreateSecurityGroupInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the CreateSecurityGroup
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var CreateSecurityGroupInputSet = function() {
    CreateSecurityGroupInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the GroupDescription input for this Choreo. ((required, string) A description for the security group that that you want to create.)
        */
        this.set_GroupDescription = function(value) {
            this.setInput("GroupDescription", value);
        }

        /*
        Set the value of the GroupName input for this Choreo. ((required, string) A name for the security group to create.)
        */
        this.set_GroupName = function(value) {
            this.setInput("GroupName", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the CreateSecurityGroup Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var CreateSecurityGroupResultSet = function(resultStream) {
    CreateSecurityGroupResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(CreateSecurityGroup, choreography.Choreography);
util.inherits(CreateSecurityGroupInputSet, choreography.InputSet);
util.inherits(CreateSecurityGroupResultSet, choreography.ResultSet);
exports.CreateSecurityGroup = CreateSecurityGroup;


/*
    CreateSnapshot
    Create a snapshot from a specified EBS volume.
*/


var CreateSnapshot = function(session) {
    /*
        Create a new instance of the CreateSnapshot Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/EC2/CreateSnapshot"
    CreateSnapshot.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new CreateSnapshotResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new CreateSnapshotInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the CreateSnapshot
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var CreateSnapshotInputSet = function() {
    CreateSnapshotInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the Description input for this Choreo. ((optional, string) A description for the volume that you want to create.)
        */
        this.set_Description = function(value) {
            this.setInput("Description", value);
        }

        /*
        Set the value of the VolumeId input for this Choreo. ((required, string) The id of the EBS volume to snapshot.)
        */
        this.set_VolumeId = function(value) {
            this.setInput("VolumeId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the CreateSnapshot Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var CreateSnapshotResultSet = function(resultStream) {
    CreateSnapshotResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(CreateSnapshot, choreography.Choreography);
util.inherits(CreateSnapshotInputSet, choreography.InputSet);
util.inherits(CreateSnapshotResultSet, choreography.ResultSet);
exports.CreateSnapshot = CreateSnapshot;


/*
    CreateVolume
    Creates a new EBS volume that your EC2 instance can attach to.
*/


var CreateVolume = function(session) {
    /*
        Create a new instance of the CreateVolume Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/EC2/CreateVolume"
    CreateVolume.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new CreateVolumeResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new CreateVolumeInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the CreateVolume
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var CreateVolumeInputSet = function() {
    CreateVolumeInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the AvailabilityZone input for this Choreo. ((required, string) The Availability Zone to use when creating thew new volume (i.e us-east-1a).)
        */
        this.set_AvailabilityZone = function(value) {
            this.setInput("AvailabilityZone", value);
        }

        /*
        Set the value of the Size input for this Choreo. ((conditional, integer) The size for the volume (in gigabytes) that you are creating. Valid Values are 1-1024. Required if you're not creating a volume from a snapshot.)
        */
        this.set_Size = function(value) {
            this.setInput("Size", value);
        }

        /*
        Set the value of the SnapshotId input for this Choreo. ((conditional, string) The snapshot from which to create the new volume. Required if you are creating a volume from a snapshot.)
        */
        this.set_SnapshotId = function(value) {
            this.setInput("SnapshotId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the CreateVolume Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var CreateVolumeResultSet = function(resultStream) {
    CreateVolumeResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(CreateVolume, choreography.Choreography);
util.inherits(CreateVolumeInputSet, choreography.InputSet);
util.inherits(CreateVolumeResultSet, choreography.ResultSet);
exports.CreateVolume = CreateVolume;


/*
    DeleteSecurityGroup
    Deletes a security group using the group name you specify.
*/


var DeleteSecurityGroup = function(session) {
    /*
        Create a new instance of the DeleteSecurityGroup Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/EC2/DeleteSecurityGroup"
    DeleteSecurityGroup.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DeleteSecurityGroupResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DeleteSecurityGroupInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DeleteSecurityGroup
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DeleteSecurityGroupInputSet = function() {
    DeleteSecurityGroupInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the GroupName input for this Choreo. ((required, string) The name of the security group to delete.)
        */
        this.set_GroupName = function(value) {
            this.setInput("GroupName", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DeleteSecurityGroup Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DeleteSecurityGroupResultSet = function(resultStream) {
    DeleteSecurityGroupResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(DeleteSecurityGroup, choreography.Choreography);
util.inherits(DeleteSecurityGroupInputSet, choreography.InputSet);
util.inherits(DeleteSecurityGroupResultSet, choreography.ResultSet);
exports.DeleteSecurityGroup = DeleteSecurityGroup;


/*
    DeleteSnapshot
    Deletes a snapshot using a snapshot id that you specify.
*/


var DeleteSnapshot = function(session) {
    /*
        Create a new instance of the DeleteSnapshot Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/EC2/DeleteSnapshot"
    DeleteSnapshot.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DeleteSnapshotResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DeleteSnapshotInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DeleteSnapshot
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DeleteSnapshotInputSet = function() {
    DeleteSnapshotInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the SnapshotId input for this Choreo. ((required, string) The id of the snapshot to delete.)
        */
        this.set_SnapshotId = function(value) {
            this.setInput("SnapshotId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DeleteSnapshot Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DeleteSnapshotResultSet = function(resultStream) {
    DeleteSnapshotResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(DeleteSnapshot, choreography.Choreography);
util.inherits(DeleteSnapshotInputSet, choreography.InputSet);
util.inherits(DeleteSnapshotResultSet, choreography.ResultSet);
exports.DeleteSnapshot = DeleteSnapshot;


/*
    DeleteVolume
    Deletes a volume using a volume id that you specify.
*/


var DeleteVolume = function(session) {
    /*
        Create a new instance of the DeleteVolume Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/EC2/DeleteVolume"
    DeleteVolume.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DeleteVolumeResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DeleteVolumeInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DeleteVolume
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DeleteVolumeInputSet = function() {
    DeleteVolumeInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the VolumeId input for this Choreo. ((required, string) The id of the volume to delete.)
        */
        this.set_VolumeId = function(value) {
            this.setInput("VolumeId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DeleteVolume Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DeleteVolumeResultSet = function(resultStream) {
    DeleteVolumeResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(DeleteVolume, choreography.Choreography);
util.inherits(DeleteVolumeInputSet, choreography.InputSet);
util.inherits(DeleteVolumeResultSet, choreography.ResultSet);
exports.DeleteVolume = DeleteVolume;


/*
    DeregisterImage
    Deregisters the specified AMI.
*/


var DeregisterImage = function(session) {
    /*
        Create a new instance of the DeregisterImage Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/EC2/DeregisterImage"
    DeregisterImage.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DeregisterImageResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DeregisterImageInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DeregisterImage
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DeregisterImageInputSet = function() {
    DeregisterImageInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the ImageId input for this Choreo. ((required, string) The AMI ID.)
        */
        this.set_ImageId = function(value) {
            this.setInput("ImageId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DeregisterImage Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DeregisterImageResultSet = function(resultStream) {
    DeregisterImageResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(DeregisterImage, choreography.Choreography);
util.inherits(DeregisterImageInputSet, choreography.InputSet);
util.inherits(DeregisterImageResultSet, choreography.ResultSet);
exports.DeregisterImage = DeregisterImage;


/*
    DescribeAvailabilityZones
    Returns Availability Zones that are available for your EC2 account.
*/


var DescribeAvailabilityZones = function(session) {
    /*
        Create a new instance of the DescribeAvailabilityZones Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/EC2/DescribeAvailabilityZones"
    DescribeAvailabilityZones.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DescribeAvailabilityZonesResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DescribeAvailabilityZonesInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DescribeAvailabilityZones
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DescribeAvailabilityZonesInputSet = function() {
    DescribeAvailabilityZonesInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DescribeAvailabilityZones Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DescribeAvailabilityZonesResultSet = function(resultStream) {
    DescribeAvailabilityZonesResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(DescribeAvailabilityZones, choreography.Choreography);
util.inherits(DescribeAvailabilityZonesInputSet, choreography.InputSet);
util.inherits(DescribeAvailabilityZonesResultSet, choreography.ResultSet);
exports.DescribeAvailabilityZones = DescribeAvailabilityZones;


/*
    DescribeImageAttribute
    Retrieves information about an attribute of an AMI.
*/


var DescribeImageAttribute = function(session) {
    /*
        Create a new instance of the DescribeImageAttribute Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/EC2/DescribeImageAttribute"
    DescribeImageAttribute.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DescribeImageAttributeResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DescribeImageAttributeInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DescribeImageAttribute
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DescribeImageAttributeInputSet = function() {
    DescribeImageAttributeInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the Attribute input for this Choreo. ((required, string) The AMI attribute to get. Valid Values are: description | kernel | ramdisk | launchPermission | productCodes | blockDeviceMapping.)
        */
        this.set_Attribute = function(value) {
            this.setInput("Attribute", value);
        }

        /*
        Set the value of the ImageId input for this Choreo. ((required, string) The AMI ID.)
        */
        this.set_ImageId = function(value) {
            this.setInput("ImageId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DescribeImageAttribute Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DescribeImageAttributeResultSet = function(resultStream) {
    DescribeImageAttributeResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(DescribeImageAttribute, choreography.Choreography);
util.inherits(DescribeImageAttributeInputSet, choreography.InputSet);
util.inherits(DescribeImageAttributeResultSet, choreography.ResultSet);
exports.DescribeImageAttribute = DescribeImageAttribute;


/*
    DescribeImages
    Returns information about Amazon Machine Image(s) that are available to you.
*/


var DescribeImages = function(session) {
    /*
        Create a new instance of the DescribeImages Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/EC2/DescribeImages"
    DescribeImages.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DescribeImagesResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DescribeImagesInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DescribeImages
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DescribeImagesInputSet = function() {
    DescribeImagesInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the ExecutableBy input for this Choreo. ((optional, string) The user ID that has explicit launch permissions. The user ID can be an AWS account ID, "self", or "all" to return AMIs with public launch permissions.)
        */
        this.set_ExecutableBy = function(value) {
            this.setInput("ExecutableBy", value);
        }

        /*
        Set the value of the FilterName input for this Choreo. ((optional, string) The name of a supported filter to narrow results with.)
        */
        this.set_FilterName = function(value) {
            this.setInput("FilterName", value);
        }

        /*
        Set the value of the FilterValue input for this Choreo. ((optional, string) A value for the specified filter.)
        */
        this.set_FilterValue = function(value) {
            this.setInput("FilterValue", value);
        }

        /*
        Set the value of the ImageId input for this Choreo. ((optional, string) The ID of the AMI that you want to return. Returns all AMIs when this parameter is not specified.)
        */
        this.set_ImageId = function(value) {
            this.setInput("ImageId", value);
        }

        /*
        Set the value of the Owner input for this Choreo. ((optional, string) The IDs "amazon", "aws-marketplace", and "self" can be used to include AMIs owned by Amazon, AWS Marketplace, or AMIs owned by you, respectively.)
        */
        this.set_Owner = function(value) {
            this.setInput("Owner", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DescribeImages Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DescribeImagesResultSet = function(resultStream) {
    DescribeImagesResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(DescribeImages, choreography.Choreography);
util.inherits(DescribeImagesInputSet, choreography.InputSet);
util.inherits(DescribeImagesResultSet, choreography.ResultSet);
exports.DescribeImages = DescribeImages;


/*
    DescribeInstances
    Returns information on EC2 instances associated with your AWS account.
*/


var DescribeInstances = function(session) {
    /*
        Create a new instance of the DescribeInstances Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/EC2/DescribeInstances"
    DescribeInstances.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DescribeInstancesResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DescribeInstancesInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DescribeInstances
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DescribeInstancesInputSet = function() {
    DescribeInstancesInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the InstanceId input for this Choreo. ((optional, string) The ID of the instance you want to return. Returns all instances if this parameter is not specified.)
        */
        this.set_InstanceId = function(value) {
            this.setInput("InstanceId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DescribeInstances Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DescribeInstancesResultSet = function(resultStream) {
    DescribeInstancesResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(DescribeInstances, choreography.Choreography);
util.inherits(DescribeInstancesInputSet, choreography.InputSet);
util.inherits(DescribeInstancesResultSet, choreography.ResultSet);
exports.DescribeInstances = DescribeInstances;


/*
    DescribeSecurityGroups
    Returns security group information associated with your AWS Account.
*/


var DescribeSecurityGroups = function(session) {
    /*
        Create a new instance of the DescribeSecurityGroups Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/EC2/DescribeSecurityGroups"
    DescribeSecurityGroups.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DescribeSecurityGroupsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DescribeSecurityGroupsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DescribeSecurityGroups
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DescribeSecurityGroupsInputSet = function() {
    DescribeSecurityGroupsInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the GroupName input for this Choreo. ((optional, string) The name of the security group to return. Returns all groups if not specified.)
        */
        this.set_GroupName = function(value) {
            this.setInput("GroupName", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DescribeSecurityGroups Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DescribeSecurityGroupsResultSet = function(resultStream) {
    DescribeSecurityGroupsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(DescribeSecurityGroups, choreography.Choreography);
util.inherits(DescribeSecurityGroupsInputSet, choreography.InputSet);
util.inherits(DescribeSecurityGroupsResultSet, choreography.ResultSet);
exports.DescribeSecurityGroups = DescribeSecurityGroups;


/*
    DescribeSnapshots
    Returns information on available Amazon EBS snapshots.
*/


var DescribeSnapshots = function(session) {
    /*
        Create a new instance of the DescribeSnapshots Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/EC2/DescribeSnapshots"
    DescribeSnapshots.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DescribeSnapshotsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DescribeSnapshotsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DescribeSnapshots
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DescribeSnapshotsInputSet = function() {
    DescribeSnapshotsInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the FilterName input for this Choreo. ((optional, string) The name of a supported filter to narrow results with.)
        */
        this.set_FilterName = function(value) {
            this.setInput("FilterName", value);
        }

        /*
        Set the value of the FilterValue input for this Choreo. ((optional, string) A value for the specified filter.)
        */
        this.set_FilterValue = function(value) {
            this.setInput("FilterValue", value);
        }

        /*
        Set the value of the Owner input for this Choreo. ((optional, string) Returns the snapshots owned by the specified owner. Valid values are: "self", "amazon", or an AWS Account ID.)
        */
        this.set_Owner = function(value) {
            this.setInput("Owner", value);
        }

        /*
        Set the value of the RestorableBy input for this Choreo. ((optional, string) AWS accounts ID that can create volumes from the snapshot.)
        */
        this.set_RestorableBy = function(value) {
            this.setInput("RestorableBy", value);
        }

        /*
        Set the value of the SnapshotId input for this Choreo. ((optional, string) The ID of the snapshot you want to retrieve. Returns all snapshots if not specified.)
        */
        this.set_SnapshotId = function(value) {
            this.setInput("SnapshotId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DescribeSnapshots Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DescribeSnapshotsResultSet = function(resultStream) {
    DescribeSnapshotsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(DescribeSnapshots, choreography.Choreography);
util.inherits(DescribeSnapshotsInputSet, choreography.InputSet);
util.inherits(DescribeSnapshotsResultSet, choreography.ResultSet);
exports.DescribeSnapshots = DescribeSnapshots;


/*
    DetachVolume
    Detaches an Amazon EBS volume from an instance.
*/


var DetachVolume = function(session) {
    /*
        Create a new instance of the DetachVolume Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/EC2/DetachVolume"
    DetachVolume.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DetachVolumeResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DetachVolumeInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DetachVolume
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DetachVolumeInputSet = function() {
    DetachVolumeInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the Device input for this Choreo. ((optional, string) The device name.)
        */
        this.set_Device = function(value) {
            this.setInput("Device", value);
        }

        /*
        Set the value of the InstanceId input for this Choreo. ((optional, string) The ID of the instance.)
        */
        this.set_InstanceId = function(value) {
            this.setInput("InstanceId", value);
        }

        /*
        Set the value of the VolumeId input for this Choreo. ((required, string) The ID of the volume.)
        */
        this.set_VolumeId = function(value) {
            this.setInput("VolumeId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DetachVolume Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DetachVolumeResultSet = function(resultStream) {
    DetachVolumeResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(DetachVolume, choreography.Choreography);
util.inherits(DetachVolumeInputSet, choreography.InputSet);
util.inherits(DetachVolumeResultSet, choreography.ResultSet);
exports.DetachVolume = DetachVolume;


/*
    ModifyImageAttribute
    Modifies an attribute of an AMI.
*/


var ModifyImageAttribute = function(session) {
    /*
        Create a new instance of the ModifyImageAttribute Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/EC2/ModifyImageAttribute"
    ModifyImageAttribute.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new ModifyImageAttributeResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new ModifyImageAttributeInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the ModifyImageAttribute
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var ModifyImageAttributeInputSet = function() {
    ModifyImageAttributeInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the AddGroup input for this Choreo. ((optional, string) Adds the specified group to the image's list of launch permissions. The only valid value is "all".)
        */
        this.set_AddGroup = function(value) {
            this.setInput("AddGroup", value);
        }

        /*
        Set the value of the AddUserId input for this Choreo. ((optional, string) Adds the specified AWS account ID to the AMI's list of launch permissions.)
        */
        this.set_AddUserId = function(value) {
            this.setInput("AddUserId", value);
        }

        /*
        Set the value of the Description input for this Choreo. ((optional, string) Changes the AMI's description to the specified value.)
        */
        this.set_Description = function(value) {
            this.setInput("Description", value);
        }

        /*
        Set the value of the ImageId input for this Choreo. ((required, string) The AMI ID.)
        */
        this.set_ImageId = function(value) {
            this.setInput("ImageId", value);
        }

        /*
        Set the value of the ProductCode input for this Choreo. ((optional, string) Adds the specified product code to the specified Amazon S3-backed AMI. Once you add a product code to an AMI, it can't be removed.)
        */
        this.set_ProductCode = function(value) {
            this.setInput("ProductCode", value);
        }

        /*
        Set the value of the RemoveGroup input for this Choreo. ((optional, string) Removes the specified group from the image's list of launch permissions. The only valid value is "all".)
        */
        this.set_RemoveGroup = function(value) {
            this.setInput("RemoveGroup", value);
        }

        /*
        Set the value of the RemoveUserId input for this Choreo. ((optional, string) Removes the specified AWS account ID from the AMI's list of launch permissions.)
        */
        this.set_RemoveUserId = function(value) {
            this.setInput("RemoveUserId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the ModifyImageAttribute Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var ModifyImageAttributeResultSet = function(resultStream) {
    ModifyImageAttributeResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(ModifyImageAttribute, choreography.Choreography);
util.inherits(ModifyImageAttributeInputSet, choreography.InputSet);
util.inherits(ModifyImageAttributeResultSet, choreography.ResultSet);
exports.ModifyImageAttribute = ModifyImageAttribute;


/*
    MonitorInstances
    Enable monitoring for a specified instance.
*/


var MonitorInstances = function(session) {
    /*
        Create a new instance of the MonitorInstances Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/EC2/MonitorInstances"
    MonitorInstances.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new MonitorInstancesResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new MonitorInstancesInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the MonitorInstances
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var MonitorInstancesInputSet = function() {
    MonitorInstancesInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the InstanceId input for this Choreo. ((required, string) The id for the instance you want to monitor.)
        */
        this.set_InstanceId = function(value) {
            this.setInput("InstanceId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the MonitorInstances Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var MonitorInstancesResultSet = function(resultStream) {
    MonitorInstancesResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(MonitorInstances, choreography.Choreography);
util.inherits(MonitorInstancesInputSet, choreography.InputSet);
util.inherits(MonitorInstancesResultSet, choreography.ResultSet);
exports.MonitorInstances = MonitorInstances;


/*
    RebootInstances
    Reboot an instance by specifying the instance id.
*/


var RebootInstances = function(session) {
    /*
        Create a new instance of the RebootInstances Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/EC2/RebootInstances"
    RebootInstances.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new RebootInstancesResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new RebootInstancesInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the RebootInstances
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var RebootInstancesInputSet = function() {
    RebootInstancesInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the InstanceId input for this Choreo. ((required, string) The id for the instance you want to reboot.)
        */
        this.set_InstanceId = function(value) {
            this.setInput("InstanceId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the RebootInstances Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var RebootInstancesResultSet = function(resultStream) {
    RebootInstancesResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(RebootInstances, choreography.Choreography);
util.inherits(RebootInstancesInputSet, choreography.InputSet);
util.inherits(RebootInstancesResultSet, choreography.ResultSet);
exports.RebootInstances = RebootInstances;


/*
    RegisterImage
    Registers a new AMI with Amazon EC2.
*/


var RegisterImage = function(session) {
    /*
        Create a new instance of the RegisterImage Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/EC2/RegisterImage"
    RegisterImage.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new RegisterImageResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new RegisterImageInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the RegisterImage
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var RegisterImageInputSet = function() {
    RegisterImageInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the Architecture input for this Choreo. ((optional, string) The architecture of the image. Valid values are: i386 or x86_64. Defaults to i386.)
        */
        this.set_Architecture = function(value) {
            this.setInput("Architecture", value);
        }

        /*
        Set the value of the DeleteOnTermination input for this Choreo. ((optional, boolean) Whether the Amazon EBS volume is deleted on instance termination. Defaults to 1 (true).)
        */
        this.set_DeleteOnTermination = function(value) {
            this.setInput("DeleteOnTermination", value);
        }

        /*
        Set the value of the Description input for this Choreo. ((optional, string) The description of the AMI.)
        */
        this.set_Description = function(value) {
            this.setInput("Description", value);
        }

        /*
        Set the value of the DeviceName input for this Choreo. ((conditional, string) If registering an Amazon EBS-backed AMI from a snapshot, specify this input with the root device name (e.g., /dev/sda1, or xvda), and SnapshotId.)
        */
        this.set_DeviceName = function(value) {
            this.setInput("DeviceName", value);
        }

        /*
        Set the value of the ImageLocation input for this Choreo. ((conditional, string) Full path to your AMI manifest in Amazon S3 storage. Required if registering an Amazon-S3 backed AMI.)
        */
        this.set_ImageLocation = function(value) {
            this.setInput("ImageLocation", value);
        }

        /*
        Set the value of the KernelId input for this Choreo. ((optional, string) The ID of the kernel to select.)
        */
        this.set_KernelId = function(value) {
            this.setInput("KernelId", value);
        }

        /*
        Set the value of the Name input for this Choreo. ((required, string) A name for your AMI.)
        */
        this.set_Name = function(value) {
            this.setInput("Name", value);
        }

        /*
        Set the value of the NoDevice input for this Choreo. ((optional, boolean) Specifies that no device should be mapped. Defaults to 1 (true).)
        */
        this.set_NoDevice = function(value) {
            this.setInput("NoDevice", value);
        }

        /*
        Set the value of the RamdiskId input for this Choreo. ((optional, string) The ID of the RAM disk to select.)
        */
        this.set_RamdiskId = function(value) {
            this.setInput("RamdiskId", value);
        }

        /*
        Set the value of the RootDeviceName input for this Choreo. ((conditional, string) The root device name (e.g., /dev/sda1, or xvda). Required if registering an Amazon EBS-backed AMI.)
        */
        this.set_RootDeviceName = function(value) {
            this.setInput("RootDeviceName", value);
        }

        /*
        Set the value of the SnapshotId input for this Choreo. ((conditional, string) If registering an Amazon EBS-backed AMI from a snapshot, you must at least specify this input with the snapshot ID, and DeviceName with the root device name.)
        */
        this.set_SnapshotId = function(value) {
            this.setInput("SnapshotId", value);
        }

        /*
        Set the value of the VirtualName input for this Choreo. ((optional, string) The virtual device name.)
        */
        this.set_VirtualName = function(value) {
            this.setInput("VirtualName", value);
        }

        /*
        Set the value of the VolumeSize input for this Choreo. ((conditional, integer) The size of the volume, in GiBs. Required if you are not creating a volume from a snapshot.)
        */
        this.set_VolumeSize = function(value) {
            this.setInput("VolumeSize", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the RegisterImage Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var RegisterImageResultSet = function(resultStream) {
    RegisterImageResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(RegisterImage, choreography.Choreography);
util.inherits(RegisterImageInputSet, choreography.InputSet);
util.inherits(RegisterImageResultSet, choreography.ResultSet);
exports.RegisterImage = RegisterImage;


/*
    StartInstances
    Allows you to start an Amazon Machine Image by specifying its Instance ID.
*/


var StartInstances = function(session) {
    /*
        Create a new instance of the StartInstances Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/EC2/StartInstances"
    StartInstances.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new StartInstancesResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new StartInstancesInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the StartInstances
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var StartInstancesInputSet = function() {
    StartInstancesInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the InstanceId input for this Choreo. ((required, string) The instance ID to start.)
        */
        this.set_InstanceId = function(value) {
            this.setInput("InstanceId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the StartInstances Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var StartInstancesResultSet = function(resultStream) {
    StartInstancesResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(StartInstances, choreography.Choreography);
util.inherits(StartInstancesInputSet, choreography.InputSet);
util.inherits(StartInstancesResultSet, choreography.ResultSet);
exports.StartInstances = StartInstances;


/*
    StopInstances
    Allows you to stop an Amazon Machine Image by specifying its Instance ID.
*/


var StopInstances = function(session) {
    /*
        Create a new instance of the StopInstances Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/EC2/StopInstances"
    StopInstances.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new StopInstancesResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new StopInstancesInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the StopInstances
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var StopInstancesInputSet = function() {
    StopInstancesInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the InstanceId input for this Choreo. ((required, string) The instance ID to stop.)
        */
        this.set_InstanceId = function(value) {
            this.setInput("InstanceId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the StopInstances Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var StopInstancesResultSet = function(resultStream) {
    StopInstancesResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(StopInstances, choreography.Choreography);
util.inherits(StopInstancesInputSet, choreography.InputSet);
util.inherits(StopInstancesResultSet, choreography.ResultSet);
exports.StopInstances = StopInstances;


/*
    UnmonitorInstances
    Disable monitoring for a specified instance.
*/


var UnmonitorInstances = function(session) {
    /*
        Create a new instance of the UnmonitorInstances Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Amazon/EC2/UnmonitorInstances"
    UnmonitorInstances.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new UnmonitorInstancesResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new UnmonitorInstancesInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the UnmonitorInstances
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var UnmonitorInstancesInputSet = function() {
    UnmonitorInstancesInputSet.super_.call(this);
        /*
        Set the value of the AWSAccessKeyId input for this Choreo. ((required, string) The Access Key ID provided by Amazon Web Services.)
        */
        this.set_AWSAccessKeyId = function(value) {
            this.setInput("AWSAccessKeyId", value);
        }

        /*
        Set the value of the AWSSecretKeyId input for this Choreo. ((required, string) The Secret Key ID provided by Amazon Web Services.)
        */
        this.set_AWSSecretKeyId = function(value) {
            this.setInput("AWSSecretKeyId", value);
        }

        /*
        Set the value of the InstanceId input for this Choreo. ((required, string) The id for the instance you want to stop monitoring.)
        */
        this.set_InstanceId = function(value) {
            this.setInput("InstanceId", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the UnmonitorInstances Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var UnmonitorInstancesResultSet = function(resultStream) {
    UnmonitorInstancesResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Amazon.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(UnmonitorInstances, choreography.Choreography);
util.inherits(UnmonitorInstancesInputSet, choreography.InputSet);
util.inherits(UnmonitorInstancesResultSet, choreography.ResultSet);
exports.UnmonitorInstances = UnmonitorInstances;




/******************************************************************************
Begin output wrapper classes
******************************************************************************/

/**
 * Utility function, to retrieve the array-type sub-item specified by the key from the parent (array) specified by the item.
 * Returns an empty array if key is not present.
 */
function getSubArrayByKey(item, key) {
	var val = item[key];
	if(val == null) {
		val = new Array();
	}
	return val;
}


