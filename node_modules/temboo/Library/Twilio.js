
var util = require("util");
var choreography = require("temboo/core/choreography");


/*
    CreateSubaccount
    Create a Twilio subaccount.
*/


var CreateSubaccount = function(session) {
    /*
        Create a new instance of the CreateSubaccount Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Twilio/CreateSubaccount"
    CreateSubaccount.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new CreateSubaccountResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new CreateSubaccountInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the CreateSubaccount
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var CreateSubaccountInputSet = function() {
    CreateSubaccountInputSet.super_.call(this);
        /*
        Set the value of the AccountSID input for this Choreo. ((conditional, string) The AccountSID provided when you signed up for a Twilio account.)
        */
        this.set_AccountSID = function(value) {
            this.setInput("AccountSID", value);
        }

        /*
        Set the value of the AuthToken input for this Choreo. ((required, string) The authorization token provided when you signed up for a Twilio account.)
        */
        this.set_AuthToken = function(value) {
            this.setInput("AuthToken", value);
        }

        /*
        Set the value of the FriendlyName input for this Choreo. ((optional, string) Enter a name for the subaccount being created.)
        */
        this.set_FriendlyName = function(value) {
            this.setInput("FriendlyName", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the CreateSubaccount Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var CreateSubaccountResultSet = function(resultStream) {
    CreateSubaccountResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Twilio.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(CreateSubaccount, choreography.Choreography);
util.inherits(CreateSubaccountInputSet, choreography.InputSet);
util.inherits(CreateSubaccountResultSet, choreography.ResultSet);
exports.CreateSubaccount = CreateSubaccount;


/*
    DeleteNotification
    Delete a notification from the account log.
*/


var DeleteNotification = function(session) {
    /*
        Create a new instance of the DeleteNotification Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Twilio/DeleteNotification"
    DeleteNotification.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DeleteNotificationResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DeleteNotificationInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DeleteNotification
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DeleteNotificationInputSet = function() {
    DeleteNotificationInputSet.super_.call(this);
        /*
        Set the value of the AccountSID input for this Choreo. ((required, string) The AccountSID provided when you signed up for a Twilio account.)
        */
        this.set_AccountSID = function(value) {
            this.setInput("AccountSID", value);
        }

        /*
        Set the value of the AuthToken input for this Choreo. ((required, string) The authorization token provided when you signed up for a Twilio account.)
        */
        this.set_AuthToken = function(value) {
            this.setInput("AuthToken", value);
        }

        /*
        Set the value of the NotificationSID input for this Choreo. ((required, string) Enter the SID of the notification resource to be deleted.)
        */
        this.set_NotificationSID = function(value) {
            this.setInput("NotificationSID", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DeleteNotification Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DeleteNotificationResultSet = function(resultStream) {
    DeleteNotificationResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Twilio.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(DeleteNotification, choreography.Choreography);
util.inherits(DeleteNotificationInputSet, choreography.InputSet);
util.inherits(DeleteNotificationResultSet, choreography.ResultSet);
exports.DeleteNotification = DeleteNotification;


/*
    GetAccountInfo
    Obtain account information.
*/


var GetAccountInfo = function(session) {
    /*
        Create a new instance of the GetAccountInfo Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Twilio/GetAccountInfo"
    GetAccountInfo.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GetAccountInfoResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GetAccountInfoInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the GetAccountInfo
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GetAccountInfoInputSet = function() {
    GetAccountInfoInputSet.super_.call(this);
        /*
        Set the value of the AccountSID input for this Choreo. ((required, string) The AccountSID provided when you signed up for a Twilio account.)
        */
        this.set_AccountSID = function(value) {
            this.setInput("AccountSID", value);
        }

        /*
        Set the value of the AuthToken input for this Choreo. ((required, string) The authorization token provided when you signed up for a Twilio account.)
        */
        this.set_AuthToken = function(value) {
            this.setInput("AuthToken", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the GetAccountInfo Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GetAccountInfoResultSet = function(resultStream) {
    GetAccountInfoResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Twilio.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(GetAccountInfo, choreography.Choreography);
util.inherits(GetAccountInfoInputSet, choreography.InputSet);
util.inherits(GetAccountInfoResultSet, choreography.ResultSet);
exports.GetAccountInfo = GetAccountInfo;


/*
    GetAllNotifications
    Return a list of all notifications generated for a specified account.
*/


var GetAllNotifications = function(session) {
    /*
        Create a new instance of the GetAllNotifications Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Twilio/GetAllNotifications"
    GetAllNotifications.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GetAllNotificationsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GetAllNotificationsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the GetAllNotifications
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GetAllNotificationsInputSet = function() {
    GetAllNotificationsInputSet.super_.call(this);
        /*
        Set the value of the AccountSID input for this Choreo. ((required, string) The AccountSID provided when you signed up for a Twilio account.)
        */
        this.set_AccountSID = function(value) {
            this.setInput("AccountSID", value);
        }

        /*
        Set the value of the AuthToken input for this Choreo. ((required, string) The authorization token provided when you signed up for a Twilio account.)
        */
        this.set_AuthToken = function(value) {
            this.setInput("AuthToken", value);
        }

        /*
        Set the value of the LogLevel input for this Choreo. ((optional, integer) Specify the log level by entering: 0 for ERROR, 1 for WARNING.)
        */
        this.set_LogLevel = function(value) {
            this.setInput("LogLevel", value);
        }

        /*
        Set the value of the MessageDate input for this Choreo. ((optional, string) Filter notifications by date.  Dates should be formatted as follows: YYYY-MM-DD.  Dates before, at, or after a specified date can be entered using inequality operators: >=YYYY-MM-DD)
        */
        this.set_MessageDate = function(value) {
            this.setInput("MessageDate", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the GetAllNotifications Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GetAllNotificationsResultSet = function(resultStream) {
    GetAllNotificationsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Twilio.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(GetAllNotifications, choreography.Choreography);
util.inherits(GetAllNotificationsInputSet, choreography.InputSet);
util.inherits(GetAllNotificationsResultSet, choreography.ResultSet);
exports.GetAllNotifications = GetAllNotifications;


/*
    GetNotificationBySID
    Get comprehensive log information for a specified Notification SID. 
*/


var GetNotificationBySID = function(session) {
    /*
        Create a new instance of the GetNotificationBySID Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Twilio/GetNotificationBySID"
    GetNotificationBySID.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GetNotificationBySIDResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GetNotificationBySIDInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the GetNotificationBySID
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GetNotificationBySIDInputSet = function() {
    GetNotificationBySIDInputSet.super_.call(this);
        /*
        Set the value of the AccountSID input for this Choreo. ((required, string) The AccountSID provided when you signed up for a Twilio account.)
        */
        this.set_AccountSID = function(value) {
            this.setInput("AccountSID", value);
        }

        /*
        Set the value of the AuthToken input for this Choreo. ((required, string) The authorization token provided when you signed up for a Twilio account.)
        */
        this.set_AuthToken = function(value) {
            this.setInput("AuthToken", value);
        }

        /*
        Set the value of the NotificationSID input for this Choreo. ((required, string) Enter the SID of the notification resource to be retrieved.)
        */
        this.set_NotificationSID = function(value) {
            this.setInput("NotificationSID", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the GetNotificationBySID Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GetNotificationBySIDResultSet = function(resultStream) {
    GetNotificationBySIDResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from Twilio.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(GetNotificationBySID, choreography.Choreography);
util.inherits(GetNotificationBySIDInputSet, choreography.InputSet);
util.inherits(GetNotificationBySIDResultSet, choreography.ResultSet);
exports.GetNotificationBySID = GetNotificationBySID;


/*
    GetSMSList
    Retrieves a list of SMS messages from your Twilio account.
*/


var GetSMSList = function(session) {
    /*
        Create a new instance of the GetSMSList Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Twilio/GetSMSList"
    GetSMSList.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GetSMSListResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GetSMSListInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the GetSMSList
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GetSMSListInputSet = function() {
    GetSMSListInputSet.super_.call(this);
        /*
        Set the value of the AccountSID input for this Choreo. ((required, string) The AccountSID provided when you signed up for a Twilio account.)
        */
        this.set_AccountSID = function(value) {
            this.setInput("AccountSID", value);
        }

        /*
        Set the value of the AuthToken input for this Choreo. ((required, string) The authorization token provided when you signed up for a Twilio account.)
        */
        this.set_AuthToken = function(value) {
            this.setInput("AuthToken", value);
        }

        /*
        Set the value of the DateSent input for this Choreo. ((optional, date) A date in YYYY-MM-DD format. If you use this input, the Choreo will retrieve only messages sent on this date.)
        */
        this.set_DateSent = function(value) {
            this.setInput("DateSent", value);
        }

        /*
        Set the value of the From input for this Choreo. ((optional, string) If used, the Choreo will only retrieve messages sent from this phone number.)
        */
        this.set_From = function(value) {
            this.setInput("From", value);
        }

        /*
        Set the value of the To input for this Choreo. ((optional, string) If used, the Choreo will only retrieve messages sent to this phone number.)
        */
        this.set_To = function(value) {
            this.setInput("To", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the GetSMSList Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GetSMSListResultSet = function(resultStream) {
    GetSMSListResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Twilio.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(GetSMSList, choreography.Choreography);
util.inherits(GetSMSListInputSet, choreography.InputSet);
util.inherits(GetSMSListResultSet, choreography.ResultSet);
exports.GetSMSList = GetSMSList;


/*
    GetSMSMessageById
    Retrieves a specific SMS from Twilio by allowing you to specify a message ID.
*/


var GetSMSMessageById = function(session) {
    /*
        Create a new instance of the GetSMSMessageById Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Twilio/GetSMSMessageById"
    GetSMSMessageById.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GetSMSMessageByIdResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GetSMSMessageByIdInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the GetSMSMessageById
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GetSMSMessageByIdInputSet = function() {
    GetSMSMessageByIdInputSet.super_.call(this);
        /*
        Set the value of the AccountSID input for this Choreo. ((required, string) The AccountSID provided when you signed up for a Twilio account.)
        */
        this.set_AccountSID = function(value) {
            this.setInput("AccountSID", value);
        }

        /*
        Set the value of the AuthToken input for this Choreo. ((required, string) The authorization token provided when you signed up for a Twilio account.)
        */
        this.set_AuthToken = function(value) {
            this.setInput("AuthToken", value);
        }

        /*
        Set the value of the SMSMessageSid input for this Choreo. ((required, string) The unique ID for the Twilio message you want to retrieve.)
        */
        this.set_SMSMessageSid = function(value) {
            this.setInput("SMSMessageSid", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the GetSMSMessageById Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GetSMSMessageByIdResultSet = function(resultStream) {
    GetSMSMessageByIdResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Twilio.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(GetSMSMessageById, choreography.Choreography);
util.inherits(GetSMSMessageByIdInputSet, choreography.InputSet);
util.inherits(GetSMSMessageByIdResultSet, choreography.ResultSet);
exports.GetSMSMessageById = GetSMSMessageById;


/*
    SendSMS
    Sends an SMS to a specified phone number using the Twilio API.
*/


var SendSMS = function(session) {
    /*
        Create a new instance of the SendSMS Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Twilio/SendSMS"
    SendSMS.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new SendSMSResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new SendSMSInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the SendSMS
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var SendSMSInputSet = function() {
    SendSMSInputSet.super_.call(this);
        /*
        Set the value of the AccountSID input for this Choreo. ((required, string) The AccountSID provided when you signed up for a Twilio account.)
        */
        this.set_AccountSID = function(value) {
            this.setInput("AccountSID", value);
        }

        /*
        Set the value of the AuthToken input for this Choreo. ((required, string) The authorization token provided when you signed up for a Twilio account.)
        */
        this.set_AuthToken = function(value) {
            this.setInput("AuthToken", value);
        }

        /*
        Set the value of the Body input for this Choreo. ((required, string) The text of your SMS message.)
        */
        this.set_Body = function(value) {
            this.setInput("Body", value);
        }

        /*
        Set the value of the From input for this Choreo. ((required, string) The purchased Twilio phone number (or Twilio Sandbox number) to send the message from.)
        */
        this.set_From = function(value) {
            this.setInput("From", value);
        }

        /*
        Set the value of the To input for this Choreo. ((required, string) The destination phone number for the SMS message.)
        */
        this.set_To = function(value) {
            this.setInput("To", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the SendSMS Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var SendSMSResultSet = function(resultStream) {
    SendSMSResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The Twilio response.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(SendSMS, choreography.Choreography);
util.inherits(SendSMSInputSet, choreography.InputSet);
util.inherits(SendSMSResultSet, choreography.ResultSet);
exports.SendSMS = SendSMS;




/******************************************************************************
Begin output wrapper classes
******************************************************************************/

/**
 * Utility function, to retrieve the array-type sub-item specified by the key from the parent (array) specified by the item.
 * Returns an empty array if key is not present.
 */
function getSubArrayByKey(item, key) {
	var val = item[key];
	if(val == null) {
		val = new Array();
	}
	return val;
}


