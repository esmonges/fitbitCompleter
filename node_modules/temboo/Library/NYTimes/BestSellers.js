
var util = require("util");
var choreography = require("temboo/core/choreography");


/*
    BestSellerHistory
    Retrieves data from a New York Times best-seller list for a specified title.
*/


var BestSellerHistory = function(session) {
    /*
        Create a new instance of the BestSellerHistory Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/NYTimes/BestSellers/BestSellerHistory"
    BestSellerHistory.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new BestSellerHistoryResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new BestSellerHistoryInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the BestSellerHistory
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var BestSellerHistoryInputSet = function() {
    BestSellerHistoryInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((string) The API Key provided by NY Times)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the Title input for this Choreo. ((string) The title of the best seller to retrieve data for)
        */
        this.set_Title = function(value) {
            this.setInput("Title", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the BestSellerHistory Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var BestSellerHistoryResultSet = function(resultStream) {
    BestSellerHistoryResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from the NY Times API.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(BestSellerHistory, choreography.Choreography);
util.inherits(BestSellerHistoryInputSet, choreography.InputSet);
util.inherits(BestSellerHistoryResultSet, choreography.ResultSet);
exports.BestSellerHistory = BestSellerHistory;


/*
    BestSellerListByDate
    Retrieves data from a New York Times best-seller list for a specified date.
*/


var BestSellerListByDate = function(session) {
    /*
        Create a new instance of the BestSellerListByDate Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/NYTimes/BestSellers/BestSellerListByDate"
    BestSellerListByDate.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new BestSellerListByDateResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new BestSellerListByDateInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the BestSellerListByDate
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var BestSellerListByDateInputSet = function() {
    BestSellerListByDateInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((required, string) The API Key provided by NY Times)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the Date input for this Choreo. ((required, date) The best-seller list publication date. Can be an epoch timestamp in milliseconds or in YYYY-MM-DD format.)
        */
        this.set_Date = function(value) {
            this.setInput("Date", value);
        }

        /*
        Set the value of the ListName input for this Choreo. ((required, string) The Times best-seller list to retrieve (i.e. e-book-fiction or hardcover-fiction))
        */
        this.set_ListName = function(value) {
            this.setInput("ListName", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the BestSellerListByDate Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var BestSellerListByDateResultSet = function(resultStream) {
    BestSellerListByDateResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from the NY Times API)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(BestSellerListByDate, choreography.Choreography);
util.inherits(BestSellerListByDateInputSet, choreography.InputSet);
util.inherits(BestSellerListByDateResultSet, choreography.ResultSet);
exports.BestSellerListByDate = BestSellerListByDate;




/******************************************************************************
Begin output wrapper classes
******************************************************************************/

/**
 * Utility function, to retrieve the array-type sub-item specified by the key from the parent (array) specified by the item.
 * Returns an empty array if key is not present.
 */
function getSubArrayByKey(item, key) {
	var val = item[key];
	if(val == null) {
		val = new Array();
	}
	return val;
}


