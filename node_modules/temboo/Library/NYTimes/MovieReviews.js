
var util = require("util");
var choreography = require("temboo/core/choreography");


/*
    GetCriticsPicks
    Retrieves lists of reviews and NYT Critics' Picks.
*/


var GetCriticsPicks = function(session) {
    /*
        Create a new instance of the GetCriticsPicks Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/NYTimes/MovieReviews/GetCriticsPicks"
    GetCriticsPicks.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GetCriticsPicksResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GetCriticsPicksInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the GetCriticsPicks
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GetCriticsPicksInputSet = function() {
    GetCriticsPicksInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((optional, string) The API Key provided by NY Times.)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) The number of results to return.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) A numeric value indicating the starting point of the result set. Used to page through results.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

        /*
        Set the value of the Order input for this Choreo. ((optional, string) Sets the sort order of the results. Accepted values are: by-title, by-publication-date, by-opening-date, by-dvd-release-date.)
        */
        this.set_Order = function(value) {
            this.setInput("Order", value);
        }

        /*
        Set the value of the ResourceType input for this Choreo. ((optional, string) Specify "picks" to get NYT Critics' Picks in theaters or "dvd-picks" to get NYT Critics' Picks on DVD. Specify "all" to retrieve all reviews.)
        */
        this.set_ResourceType = function(value) {
            this.setInput("ResourceType", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to json, xml, or sphp. Defaults to xml.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the GetCriticsPicks Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GetCriticsPicksResultSet = function(resultStream) {
    GetCriticsPicksResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from the NY Times API. Format corresponds to the ResponseFormat input. Defaults to xml.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(GetCriticsPicks, choreography.Choreography);
util.inherits(GetCriticsPicksInputSet, choreography.InputSet);
util.inherits(GetCriticsPicksResultSet, choreography.ResultSet);
exports.GetCriticsPicks = GetCriticsPicks;


/*
    GetReviewerDetails
    Retrieves biographical information about reviewers.
*/


var GetReviewerDetails = function(session) {
    /*
        Create a new instance of the GetReviewerDetails Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/NYTimes/MovieReviews/GetReviewerDetails"
    GetReviewerDetails.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GetReviewerDetailsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GetReviewerDetailsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the GetReviewerDetails
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GetReviewerDetailsInputSet = function() {
    GetReviewerDetailsInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((optional, string) The API Key provided by NY Times.)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the ResourceType input for this Choreo. ((optional, string) Specify "all", "full-time", or "part-time" for that subset. Specify a reviewer's name to get details about a reviewer. Names should be separated by hyphens or dots (i.e. manohla-dargis))
        */
        this.set_ResourceType = function(value) {
            this.setInput("ResourceType", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to json, xml, or sphp. Defaults to xml.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the GetReviewerDetails Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GetReviewerDetailsResultSet = function(resultStream) {
    GetReviewerDetailsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from the NY Times API. Format corresponds to the ResponseFormat input. Defaults to xml.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(GetReviewerDetails, choreography.Choreography);
util.inherits(GetReviewerDetailsInputSet, choreography.InputSet);
util.inherits(GetReviewerDetailsResultSet, choreography.ResultSet);
exports.GetReviewerDetails = GetReviewerDetails;


/*
    GetReviewsByKeyword
    Searches movie reviews by keyword and various filter parameters.
*/


var GetReviewsByKeyword = function(session) {
    /*
        Create a new instance of the GetReviewsByKeyword Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/NYTimes/MovieReviews/GetReviewsByKeyword"
    GetReviewsByKeyword.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GetReviewsByKeywordResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GetReviewsByKeywordInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the GetReviewsByKeyword
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GetReviewsByKeywordInputSet = function() {
    GetReviewsByKeywordInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((optional, string) The API Key provided by NY Times.)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the CriticsPick input for this Choreo. ((optional, string) Set this parameter to Y to limt the results to NYT Critics' Picks. To get only those movies that have not been highlighted by Times critics, specify N.)
        */
        this.set_CriticsPick = function(value) {
            this.setInput("CriticsPick", value);
        }

        /*
        Set the value of the DVD input for this Choreo. ((optional, string) Set this parameter to Y to limit the results to movies that have been released on DVD. To get only those movies that have not been released on DVD, specify N.)
        */
        this.set_DVD = function(value) {
            this.setInput("DVD", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) The number of results to return.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) A numeric value indicating the starting point of the result set. This can be used in combination with the Limit input to page through results.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

        /*
        Set the value of the OpeningDate input for this Choreo. ((optional, date) Limits by date or range of dates. The opening-date is the date the movie's opening date in the New York region. Format YYYY-MM-DD. Separate ranges with semicolons.)
        */
        this.set_OpeningDate = function(value) {
            this.setInput("OpeningDate", value);
        }

        /*
        Set the value of the Order input for this Choreo. ((optional, string) Sets the sort order of the results. Accepted values are: by-title, by-publication-date, by-opening-date, by-dvd-release-date.)
        */
        this.set_Order = function(value) {
            this.setInput("Order", value);
        }

        /*
        Set the value of the PublicationDate input for this Choreo. ((optional, date) Limits by date or range of dates. The publication-date is the date the review was first publish.ed in The Times. Format YYYY-MM-DD. Separate ranges with semicolons.)
        */
        this.set_PublicationDate = function(value) {
            this.setInput("PublicationDate", value);
        }

        /*
        Set the value of the Query input for this Choreo. ((conditional, string) A string of search keywords. Matches movie titles and indexed terms.)
        */
        this.set_Query = function(value) {
            this.setInput("Query", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to json, xml, or sphp. Defaults to xml.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Reviewer input for this Choreo. ((optional, string) Limits results to reviews by a specific critic. Reviewer names should be hyphenated or concatenated with dots (i.e manohla.dargis).)
        */
        this.set_Reviewer = function(value) {
            this.setInput("Reviewer", value);
        }

        /*
        Set the value of the ThousandBest input for this Choreo. ((optional, string) Set this parameter to Y to limit the results to movies on the Times list of The Best 1,000 Movies Ever Made. To get only those movies that are not on the list, specify N.)
        */
        this.set_ThousandBest = function(value) {
            this.setInput("ThousandBest", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the GetReviewsByKeyword Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GetReviewsByKeywordResultSet = function(resultStream) {
    GetReviewsByKeywordResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from the NY Times API. Format corresponds to the ResponseFormat input. Defaults to xml.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(GetReviewsByKeyword, choreography.Choreography);
util.inherits(GetReviewsByKeywordInputSet, choreography.InputSet);
util.inherits(GetReviewsByKeywordResultSet, choreography.ResultSet);
exports.GetReviewsByKeyword = GetReviewsByKeyword;


/*
    GetReviewsByReviewer
    Retrieves reviews by a specific Times reviewer.
*/


var GetReviewsByReviewer = function(session) {
    /*
        Create a new instance of the GetReviewsByReviewer Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/NYTimes/MovieReviews/GetReviewsByReviewer"
    GetReviewsByReviewer.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GetReviewsByReviewerResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GetReviewsByReviewerInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the GetReviewsByReviewer
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GetReviewsByReviewerInputSet = function() {
    GetReviewsByReviewerInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((optional, string) The API Key provided by NY Times.)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the CriticsPick input for this Choreo. ((optional, string) Set this parameter to Y to limt the results to NYT Critics' Picks. To get only those movies that have not been highlighted by Times critics, specify N.)
        */
        this.set_CriticsPick = function(value) {
            this.setInput("CriticsPick", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) A numeric value indicating the starting point of the result set. Used to page through results.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

        /*
        Set the value of the Order input for this Choreo. ((optional, string) Sets the sort order of the results. Accepted values are: by-title, by-publication-date, by-opening-date, by-dvd-release-date.)
        */
        this.set_Order = function(value) {
            this.setInput("Order", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format that the response should be in. Can be set to json, xml, or sphp. Defaults to xml.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the ReviewerName input for this Choreo. ((required, string) The name of the Times reviewer. Reviewer names should be separated by hyphens or dots (i.e. manohla-dargis or manohla.dargis))
        */
        this.set_ReviewerName = function(value) {
            this.setInput("ReviewerName", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the GetReviewsByReviewer Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GetReviewsByReviewerResultSet = function(resultStream) {
    GetReviewsByReviewerResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from the NY Times API. Format corresponds to the ResponseFormat input. Defaults to xml.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(GetReviewsByReviewer, choreography.Choreography);
util.inherits(GetReviewsByReviewerInputSet, choreography.InputSet);
util.inherits(GetReviewsByReviewerResultSet, choreography.ResultSet);
exports.GetReviewsByReviewer = GetReviewsByReviewer;




/******************************************************************************
Begin output wrapper classes
******************************************************************************/

/**
 * Utility function, to retrieve the array-type sub-item specified by the key from the parent (array) specified by the item.
 * Returns an empty array if key is not present.
 */
function getSubArrayByKey(item, key) {
	var val = item[key];
	if(val == null) {
		val = new Array();
	}
	return val;
}


