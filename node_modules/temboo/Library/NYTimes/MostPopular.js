
var util = require("util");
var choreography = require("temboo/core/choreography");


/*
    MostEmailed
    Retrieves information for the blog posts and articles that are most frequently emailed.
*/


var MostEmailed = function(session) {
    /*
        Create a new instance of the MostEmailed Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/NYTimes/MostPopular/MostEmailed"
    MostEmailed.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new MostEmailedResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new MostEmailedInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the MostEmailed
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var MostEmailedInputSet = function() {
    MostEmailedInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((string) The API Key provided by NY Times)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the Section input for this Choreo. ((string) Limits the results by one or more sections (i.e. arts).  To get all sections, specify all-sections.)
        */
        this.set_Section = function(value) {
            this.setInput("Section", value);
        }

        /*
        Set the value of the TimePeriod input for this Choreo. ((integer) Corresponds to a day, a week, or a month of content (i.e. 1, 7, 30))
        */
        this.set_TimePeriod = function(value) {
            this.setInput("TimePeriod", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the MostEmailed Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var MostEmailedResultSet = function(resultStream) {
    MostEmailedResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from the NY Times API)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(MostEmailed, choreography.Choreography);
util.inherits(MostEmailedInputSet, choreography.InputSet);
util.inherits(MostEmailedResultSet, choreography.ResultSet);
exports.MostEmailed = MostEmailed;


/*
    MostShared
    Retrieves information for the blog posts and articles that are most frequently shared.
*/


var MostShared = function(session) {
    /*
        Create a new instance of the MostShared Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/NYTimes/MostPopular/MostShared"
    MostShared.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new MostSharedResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new MostSharedInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the MostShared
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var MostSharedInputSet = function() {
    MostSharedInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((string) The API Key provided by NY Times)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the Section input for this Choreo. ((string) Limits the results by one or more sections (i.e. arts).  To get all sections, specify all-sections.)
        */
        this.set_Section = function(value) {
            this.setInput("Section", value);
        }

        /*
        Set the value of the ShareTypes input for this Choreo. ((string) Limits the results by the method used to share the items.  Separate multiple share types by semicolons (i.e. facebook; twitter).)
        */
        this.set_ShareTypes = function(value) {
            this.setInput("ShareTypes", value);
        }

        /*
        Set the value of the TimePeriod input for this Choreo. ((integer) Corresponds to a day, a week, or a month of content (i.e. 1, 7, 30))
        */
        this.set_TimePeriod = function(value) {
            this.setInput("TimePeriod", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the MostShared Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var MostSharedResultSet = function(resultStream) {
    MostSharedResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from the NY Times API)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(MostShared, choreography.Choreography);
util.inherits(MostSharedInputSet, choreography.InputSet);
util.inherits(MostSharedResultSet, choreography.ResultSet);
exports.MostShared = MostShared;


/*
    MostViewed
    Retrieves information for the blog posts and articles that are most frequently viewed.
*/


var MostViewed = function(session) {
    /*
        Create a new instance of the MostViewed Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/NYTimes/MostPopular/MostViewed"
    MostViewed.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new MostViewedResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new MostViewedInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the MostViewed
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var MostViewedInputSet = function() {
    MostViewedInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((string) The API Key provided by NY Times)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the Offset input for this Choreo. ((optional, integer) The starting point of the result set. Must be a multiple of 20.)
        */
        this.set_Offset = function(value) {
            this.setInput("Offset", value);
        }

        /*
        Set the value of the Section input for this Choreo. ((string) Limits the results by one or more sections (i.e. arts).  To get all sections, specify all-sections.)
        */
        this.set_Section = function(value) {
            this.setInput("Section", value);
        }

        /*
        Set the value of the TimePeriod input for this Choreo. ((integer) Corresponds to a day, a week, or a month of content (i.e. 1, 7, 30))
        */
        this.set_TimePeriod = function(value) {
            this.setInput("TimePeriod", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the MostViewed Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var MostViewedResultSet = function(resultStream) {
    MostViewedResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from the NY Times API)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(MostViewed, choreography.Choreography);
util.inherits(MostViewedInputSet, choreography.InputSet);
util.inherits(MostViewedResultSet, choreography.ResultSet);
exports.MostViewed = MostViewed;




/******************************************************************************
Begin output wrapper classes
******************************************************************************/

/**
 * Utility function, to retrieve the array-type sub-item specified by the key from the parent (array) specified by the item.
 * Returns an empty array if key is not present.
 */
function getSubArrayByKey(item, key) {
	var val = item[key];
	if(val == null) {
		val = new Array();
	}
	return val;
}


