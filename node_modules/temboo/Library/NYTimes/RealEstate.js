
var util = require("util");
var choreography = require("temboo/core/choreography");


/*
    ListingsCounts
    Retrieves counts of real estate listings from New York Times Web Service.
*/


var ListingsCounts = function(session) {
    /*
        Create a new instance of the ListingsCounts Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/NYTimes/RealEstate/ListingsCounts"
    ListingsCounts.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new ListingsCountsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new ListingsCountsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the ListingsCounts
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var ListingsCountsInputSet = function() {
    ListingsCountsInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((string) The API Key provided by NY Times)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the Bedrooms input for this Choreo. ((optional, integer) Limits the results by number of bedrooms to search for. Defaults to 1.)
        */
        this.set_Bedrooms = function(value) {
            this.setInput("Bedrooms", value);
        }

        /*
        Set the value of the DateRange input for this Choreo. ((string) Sets the quarter, month, week or day for the results (i.e. 2008-Q1, 2008-W52, 2007-07, 2010-10-01, etc))
        */
        this.set_DateRange = function(value) {
            this.setInput("DateRange", value);
        }

        /*
        Set the value of the GeoExtentLevel input for this Choreo. ((string) The geographical unit for the results (i.e. borough, neighborhood, or zip))
        */
        this.set_GeoExtentLevel = function(value) {
            this.setInput("GeoExtentLevel", value);
        }

        /*
        Set the value of the GeoExtentValue input for this Choreo. ((string) Limits the search to a specific area.  For example, if GeoExtendLevel is borough, the value for GeoExtendValue could be Brooklyn.)
        */
        this.set_GeoExtentValue = function(value) {
            this.setInput("GeoExtentValue", value);
        }

        /*
        Set the value of the GeoSummaryLevel input for this Choreo. ((string) The geographic unit for grouping the results (borough, neighborhood, or zip))
        */
        this.set_GeoSummaryLevel = function(value) {
            this.setInput("GeoSummaryLevel", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the ListingsCounts Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var ListingsCountsResultSet = function(resultStream) {
    ListingsCountsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from the NY Times API)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(ListingsCounts, choreography.Choreography);
util.inherits(ListingsCountsInputSet, choreography.InputSet);
util.inherits(ListingsCountsResultSet, choreography.ResultSet);
exports.ListingsCounts = ListingsCounts;


/*
    ListingsPercentiles
    Retrieves percentiles of real estate listings from New York Times Web Service.
*/


var ListingsPercentiles = function(session) {
    /*
        Create a new instance of the ListingsPercentiles Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/NYTimes/RealEstate/ListingsPercentiles"
    ListingsPercentiles.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new ListingsPercentilesResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new ListingsPercentilesInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the ListingsPercentiles
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var ListingsPercentilesInputSet = function() {
    ListingsPercentilesInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((string) The API Key provided by NY Times)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the Bedrooms input for this Choreo. ((optional, integer) Limits the results by number of bedrooms to search for. Defaults to 1.)
        */
        this.set_Bedrooms = function(value) {
            this.setInput("Bedrooms", value);
        }

        /*
        Set the value of the DateRange input for this Choreo. ((string) Sets the quarter, month, week or day for the results (i.e. 2008-Q1, 2008-W52, 2007-07, 2010-10-01, etc))
        */
        this.set_DateRange = function(value) {
            this.setInput("DateRange", value);
        }

        /*
        Set the value of the GeoExtentLevel input for this Choreo. ((string) The geographical unit for the results (i.e. borough, neighborhood, or zip))
        */
        this.set_GeoExtentLevel = function(value) {
            this.setInput("GeoExtentLevel", value);
        }

        /*
        Set the value of the GeoExtentValue input for this Choreo. ((string) Limits the search to a specific area.  For example, if GeoExtendLevel is borough, the value for GeoExtendValue could be Brooklyn.)
        */
        this.set_GeoExtentValue = function(value) {
            this.setInput("GeoExtentValue", value);
        }

        /*
        Set the value of the GeoSummaryLevel input for this Choreo. ((string) The geographic unit for grouping the results (borough, neighborhood, or zip))
        */
        this.set_GeoSummaryLevel = function(value) {
            this.setInput("GeoSummaryLevel", value);
        }

        /*
        Set the value of the Percentile input for this Choreo. ((integer) Specify a percentile for the listing prices you want to retrieve (i.e 50))
        */
        this.set_Percentile = function(value) {
            this.setInput("Percentile", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the ListingsPercentiles Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var ListingsPercentilesResultSet = function(resultStream) {
    ListingsPercentilesResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from the NY Times Web Service)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(ListingsPercentiles, choreography.Choreography);
util.inherits(ListingsPercentilesInputSet, choreography.InputSet);
util.inherits(ListingsPercentilesResultSet, choreography.ResultSet);
exports.ListingsPercentiles = ListingsPercentiles;


/*
    SalesCounts
    Retrieves counts of real estate sales from New York Times Web Service.
*/


var SalesCounts = function(session) {
    /*
        Create a new instance of the SalesCounts Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/NYTimes/RealEstate/SalesCounts"
    SalesCounts.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new SalesCountsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new SalesCountsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the SalesCounts
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var SalesCountsInputSet = function() {
    SalesCountsInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((string) The API Key provided by NY Times)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the Bedrooms input for this Choreo. ((optional, integer) Limits the results by number of bedrooms to search for. Defaults to 1.)
        */
        this.set_Bedrooms = function(value) {
            this.setInput("Bedrooms", value);
        }

        /*
        Set the value of the DateRange input for this Choreo. ((string) Sets the quarter, month, week or day for the results (i.e. 2008-Q1, 2008-W52, 2007-07, 2010-10-01, etc))
        */
        this.set_DateRange = function(value) {
            this.setInput("DateRange", value);
        }

        /*
        Set the value of the GeoExtentLevel input for this Choreo. ((string) The geographical unit for the results (i.e. borough, neighborhood, or zip))
        */
        this.set_GeoExtentLevel = function(value) {
            this.setInput("GeoExtentLevel", value);
        }

        /*
        Set the value of the GeoExtentValue input for this Choreo. ((string) Limits the search to a specific area.  For example, if GeoExtendLevel is borough, the value for GeoExtendValue could be Brooklyn.)
        */
        this.set_GeoExtentValue = function(value) {
            this.setInput("GeoExtentValue", value);
        }

        /*
        Set the value of the GeoSummaryLevel input for this Choreo. ((string) The geographic unit for grouping the results (borough, neighborhood, or zip))
        */
        this.set_GeoSummaryLevel = function(value) {
            this.setInput("GeoSummaryLevel", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the SalesCounts Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var SalesCountsResultSet = function(resultStream) {
    SalesCountsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from the NY Times API)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(SalesCounts, choreography.Choreography);
util.inherits(SalesCountsInputSet, choreography.InputSet);
util.inherits(SalesCountsResultSet, choreography.ResultSet);
exports.SalesCounts = SalesCounts;


/*
    SalesPercentiles
    Retrieves percentiles of real estate sales from New York Times Web Service.
*/


var SalesPercentiles = function(session) {
    /*
        Create a new instance of the SalesPercentiles Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/NYTimes/RealEstate/SalesPercentiles"
    SalesPercentiles.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new SalesPercentilesResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new SalesPercentilesInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the SalesPercentiles
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var SalesPercentilesInputSet = function() {
    SalesPercentilesInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((string) The API Key provided by NY Times)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the Bedrooms input for this Choreo. ((optional, integer) Limits the results by number of bedrooms to search for. Defaults to 1.)
        */
        this.set_Bedrooms = function(value) {
            this.setInput("Bedrooms", value);
        }

        /*
        Set the value of the DateRange input for this Choreo. ((string) Sets the quarter, month, week or day for the results (i.e. 2008-Q1, 2008-W52, 2007-07, etc))
        */
        this.set_DateRange = function(value) {
            this.setInput("DateRange", value);
        }

        /*
        Set the value of the GeoExtentLevel input for this Choreo. ((string) The geographical unit for the results (i.e. borough, neighborhood, or zip))
        */
        this.set_GeoExtentLevel = function(value) {
            this.setInput("GeoExtentLevel", value);
        }

        /*
        Set the value of the GeoExtentValue input for this Choreo. ((string) Limits the search to a specific area.  For example, if GeoExtendLevel is borough, the value for GeoExtendValue could be Brooklyn.)
        */
        this.set_GeoExtentValue = function(value) {
            this.setInput("GeoExtentValue", value);
        }

        /*
        Set the value of the GeoSummaryLevel input for this Choreo. ((string) The geographic unit for grouping the results (borough, neighborhood, or zip))
        */
        this.set_GeoSummaryLevel = function(value) {
            this.setInput("GeoSummaryLevel", value);
        }

        /*
        Set the value of the Percentile input for this Choreo. ((integer) Specify the percentile for sales prices you want to retrieve (i.e 50))
        */
        this.set_Percentile = function(value) {
            this.setInput("Percentile", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the SalesPercentiles Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var SalesPercentilesResultSet = function(resultStream) {
    SalesPercentilesResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((XML) The response from the NY Times API)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(SalesPercentiles, choreography.Choreography);
util.inherits(SalesPercentilesInputSet, choreography.InputSet);
util.inherits(SalesPercentilesResultSet, choreography.ResultSet);
exports.SalesPercentiles = SalesPercentiles;




/******************************************************************************
Begin output wrapper classes
******************************************************************************/

/**
 * Utility function, to retrieve the array-type sub-item specified by the key from the parent (array) specified by the item.
 * Returns an empty array if key is not present.
 */
function getSubArrayByKey(item, key) {
	var val = item[key];
	if(val == null) {
		val = new Array();
	}
	return val;
}


