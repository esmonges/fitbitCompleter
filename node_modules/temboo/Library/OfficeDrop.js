
var util = require("util");
var choreography = require("temboo/core/choreography");


/*
    DeleteDocuments
    Lets you move documents to the trash by specifying document ids.
*/


var DeleteDocuments = function(session) {
    /*
        Create a new instance of the DeleteDocuments Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/OfficeDrop/DeleteDocuments"
    DeleteDocuments.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DeleteDocumentsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DeleteDocumentsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DeleteDocuments
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DeleteDocumentsInputSet = function() {
    DeleteDocumentsInputSet.super_.call(this);
        /*
        Set the value of the DocumentIds input for this Choreo. ((required, integer) The IDs of the documents you want to move to the trash.  Separate IDs by commas.)
        */
        this.set_DocumentIds = function(value) {
            this.setInput("DocumentIds", value);
        }

        /*
        Set the value of the Password input for this Choreo. ((required, password) Your OfficeDrop password.)
        */
        this.set_Password = function(value) {
            this.setInput("Password", value);
        }

        /*
        Set the value of the Username input for this Choreo. ((required, string) Your OfficeDrop username.)
        */
        this.set_Username = function(value) {
            this.setInput("Username", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DeleteDocuments Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DeleteDocumentsResultSet = function(resultStream) {
    DeleteDocumentsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from OfficeDrop.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(DeleteDocuments, choreography.Choreography);
util.inherits(DeleteDocumentsInputSet, choreography.InputSet);
util.inherits(DeleteDocumentsResultSet, choreography.ResultSet);
exports.DeleteDocuments = DeleteDocuments;


/*
    DocumentsListAndSearch
    Search and return a list of documents from OfficeDrop
*/


var DocumentsListAndSearch = function(session) {
    /*
        Create a new instance of the DocumentsListAndSearch Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/OfficeDrop/DocumentsListAndSearch"
    DocumentsListAndSearch.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new DocumentsListAndSearchResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new DocumentsListAndSearchInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the DocumentsListAndSearch
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var DocumentsListAndSearchInputSet = function() {
    DocumentsListAndSearchInputSet.super_.call(this);
        /*
        Set the value of the Favorites input for this Choreo. ((optional, boolean) Will return documents that have been marked as favorites. Specify a 1 for true. Defaults to 0.)
        */
        this.set_Favorites = function(value) {
            this.setInput("Favorites", value);
        }

        /*
        Set the value of the FolderId input for this Choreo. ((optional, integer) The ID of the folder to filter by.)
        */
        this.set_FolderId = function(value) {
            this.setInput("FolderId", value);
        }

        /*
        Set the value of the LabelIds input for this Choreo. ((optional, integer) A comma separated list of label IDs to filter the result by.)
        */
        this.set_LabelIds = function(value) {
            this.setInput("LabelIds", value);
        }

        /*
        Set the value of the Page input for this Choreo. ((optional, integer) The page of the documents listing you want to return. Defaults to 1.)
        */
        this.set_Page = function(value) {
            this.setInput("Page", value);
        }

        /*
        Set the value of the Password input for this Choreo. ((required, password) Your OfficeDrop password.)
        */
        this.set_Password = function(value) {
            this.setInput("Password", value);
        }

        /*
        Set the value of the PerPage input for this Choreo. ((optional, integer) The number of documents you want to return in each request. Defaults to 15.)
        */
        this.set_PerPage = function(value) {
            this.setInput("PerPage", value);
        }

        /*
        Set the value of the Query input for this Choreo. ((optional, string) The text keywords to search by.)
        */
        this.set_Query = function(value) {
            this.setInput("Query", value);
        }

        /*
        Set the value of the Sort input for this Choreo. ((optional, string) The method you want to sort the results by: newest, oldest, most_viewed, name, name_reverse, recently_viewed, most_viewed, or relevance.)
        */
        this.set_Sort = function(value) {
            this.setInput("Sort", value);
        }

        /*
        Set the value of the Username input for this Choreo. ((required, string) Your OfficeDrop username.)
        */
        this.set_Username = function(value) {
            this.setInput("Username", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the DocumentsListAndSearch Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var DocumentsListAndSearchResultSet = function(resultStream) {
    DocumentsListAndSearchResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from OfficeDrop.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(DocumentsListAndSearch, choreography.Choreography);
util.inherits(DocumentsListAndSearchInputSet, choreography.InputSet);
util.inherits(DocumentsListAndSearchResultSet, choreography.ResultSet);
exports.DocumentsListAndSearch = DocumentsListAndSearch;


/*
    RecoverPassword
    Recovers a  password by triggering an email to a specified email address belonging to the user.
*/


var RecoverPassword = function(session) {
    /*
        Create a new instance of the RecoverPassword Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/OfficeDrop/RecoverPassword"
    RecoverPassword.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new RecoverPasswordResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new RecoverPasswordInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the RecoverPassword
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var RecoverPasswordInputSet = function() {
    RecoverPasswordInputSet.super_.call(this);
        /*
        Set the value of the Email input for this Choreo. ((required, string) The email address associated with the password you want to recover.)
        */
        this.set_Email = function(value) {
            this.setInput("Email", value);
        }

        /*
        Set the value of the Username input for this Choreo. ((required, string) The username associated with the password you want to recover.)
        */
        this.set_Username = function(value) {
            this.setInput("Username", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the RecoverPassword Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var RecoverPasswordResultSet = function(resultStream) {
    RecoverPasswordResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from OfficeDrop.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(RecoverPassword, choreography.Choreography);
util.inherits(RecoverPasswordInputSet, choreography.InputSet);
util.inherits(RecoverPasswordResultSet, choreography.ResultSet);
exports.RecoverPassword = RecoverPassword;


/*
    RecoverUsername
    Recovers a  username by triggering an email to a specified email address belonging to the user.
*/


var RecoverUsername = function(session) {
    /*
        Create a new instance of the RecoverUsername Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/OfficeDrop/RecoverUsername"
    RecoverUsername.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new RecoverUsernameResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new RecoverUsernameInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the RecoverUsername
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var RecoverUsernameInputSet = function() {
    RecoverUsernameInputSet.super_.call(this);
        /*
        Set the value of the Email input for this Choreo. ((required, string) The email address associated with the username you want to recover.)
        */
        this.set_Email = function(value) {
            this.setInput("Email", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the RecoverUsername Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var RecoverUsernameResultSet = function(resultStream) {
    RecoverUsernameResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from OfficeDrop.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(RecoverUsername, choreography.Choreography);
util.inherits(RecoverUsernameInputSet, choreography.InputSet);
util.inherits(RecoverUsernameResultSet, choreography.ResultSet);
exports.RecoverUsername = RecoverUsername;


/*
    UploadDocument
    Uploads a document to your OfficeDrop account.
*/


var UploadDocument = function(session) {
    /*
        Create a new instance of the UploadDocument Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/OfficeDrop/UploadDocument"
    UploadDocument.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new UploadDocumentResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new UploadDocumentInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the UploadDocument
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var UploadDocumentInputSet = function() {
    UploadDocumentInputSet.super_.call(this);
        /*
        Set the value of the FileContents input for this Choreo. ((conditional, string) The Base64-encoded file contents for the file you want to upload. Required unless using the VaultFile input alias (an advanced option used when running Choreos in the Temboo Designer).)
        */
        this.set_FileContents = function(value) {
            this.setInput("FileContents", value);
        }

        /*
        Set the value of the ContentType input for this Choreo. ((optional, string) The Content-Type of the file you are uploading. Defaults to text/plain.)
        */
        this.set_ContentType = function(value) {
            this.setInput("ContentType", value);
        }

        /*
        Set the value of the FileName input for this Choreo. ((required, string) The filename to attach to the file being uploaded.)
        */
        this.set_FileName = function(value) {
            this.setInput("FileName", value);
        }

        /*
        Set the value of the FolderId input for this Choreo. ((optional, integer) The ID of the folder to which you want to upload the file (if left empty, the file destination will be the root folder).)
        */
        this.set_FolderId = function(value) {
            this.setInput("FolderId", value);
        }

        /*
        Set the value of the Password input for this Choreo. ((required, password) Your OfficeDrop password.)
        */
        this.set_Password = function(value) {
            this.setInput("Password", value);
        }

        /*
        Set the value of the Username input for this Choreo. ((required, string) Your OfficeDrop username.)
        */
        this.set_Username = function(value) {
            this.setInput("Username", value);
        }

        /*
        Set the value of the VaultFile input for this Choreo. ((optional, vault file) The path to a vault file that you want to upload. Required unless using the FileContents input.)
        */

}

/*
A ResultSet with methods tailored to the values returned by the UploadDocument Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var UploadDocumentResultSet = function(resultStream) {
    UploadDocumentResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from OfficeDrop.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(UploadDocument, choreography.Choreography);
util.inherits(UploadDocumentInputSet, choreography.InputSet);
util.inherits(UploadDocumentResultSet, choreography.ResultSet);
exports.UploadDocument = UploadDocument;


/*
    UserRegistration
    Register a new user account at OfficeDrop with your application.
*/


var UserRegistration = function(session) {
    /*
        Create a new instance of the UserRegistration Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/OfficeDrop/UserRegistration"
    UserRegistration.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new UserRegistrationResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new UserRegistrationInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the UserRegistration
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var UserRegistrationInputSet = function() {
    UserRegistrationInputSet.super_.call(this);
        /*
        Set the value of the CustomerName input for this Choreo. ((required, string) The customer name that is associated with the new registration)
        */
        this.set_CustomerName = function(value) {
            this.setInput("CustomerName", value);
        }

        /*
        Set the value of the Email input for this Choreo. ((required, string) The email address that is associated with the new registration)
        */
        this.set_Email = function(value) {
            this.setInput("Email", value);
        }

        /*
        Set the value of the Password input for this Choreo. ((required, password) The password that is associated with the new registration)
        */
        this.set_Password = function(value) {
            this.setInput("Password", value);
        }

        /*
        Set the value of the Username input for this Choreo. ((required, string) The username that is associated with the new registration)
        */
        this.set_Username = function(value) {
            this.setInput("Username", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the UserRegistration Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var UserRegistrationResultSet = function(resultStream) {
    UserRegistrationResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from OfficeDrop)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(UserRegistration, choreography.Choreography);
util.inherits(UserRegistrationInputSet, choreography.InputSet);
util.inherits(UserRegistrationResultSet, choreography.ResultSet);
exports.UserRegistration = UserRegistration;


/*
    ValidateUserCredentials
    Validates user credentials and returns user info by specifying a username and password.
*/


var ValidateUserCredentials = function(session) {
    /*
        Create a new instance of the ValidateUserCredentials Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/OfficeDrop/ValidateUserCredentials"
    ValidateUserCredentials.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new ValidateUserCredentialsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new ValidateUserCredentialsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the ValidateUserCredentials
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var ValidateUserCredentialsInputSet = function() {
    ValidateUserCredentialsInputSet.super_.call(this);
        /*
        Set the value of the Password input for this Choreo. ((required, password) The OfficeDrop password that should be verified.)
        */
        this.set_Password = function(value) {
            this.setInput("Password", value);
        }

        /*
        Set the value of the Username input for this Choreo. ((required, string) The OfficeDrop username that should be verified.)
        */
        this.set_Username = function(value) {
            this.setInput("Username", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the ValidateUserCredentials Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var ValidateUserCredentialsResultSet = function(resultStream) {
    ValidateUserCredentialsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from OfficeDrop.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(ValidateUserCredentials, choreography.Choreography);
util.inherits(ValidateUserCredentialsInputSet, choreography.InputSet);
util.inherits(ValidateUserCredentialsResultSet, choreography.ResultSet);
exports.ValidateUserCredentials = ValidateUserCredentials;


/*
    ViewDocument
    Lets you specify a document id to return information on a single document.
*/


var ViewDocument = function(session) {
    /*
        Create a new instance of the ViewDocument Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/OfficeDrop/ViewDocument"
    ViewDocument.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new ViewDocumentResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new ViewDocumentInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the ViewDocument
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var ViewDocumentInputSet = function() {
    ViewDocumentInputSet.super_.call(this);
        /*
        Set the value of the DocumentId input for this Choreo. ((required, integer) The ID of the document you want to view.)
        */
        this.set_DocumentId = function(value) {
            this.setInput("DocumentId", value);
        }

        /*
        Set the value of the Password input for this Choreo. ((required, password) Your OfficeDrop password.)
        */
        this.set_Password = function(value) {
            this.setInput("Password", value);
        }

        /*
        Set the value of the Username input for this Choreo. ((required, string) Your OfficeDrop username.)
        */
        this.set_Username = function(value) {
            this.setInput("Username", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the ViewDocument Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var ViewDocumentResultSet = function(resultStream) {
    ViewDocumentResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from OfficeDrop.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(ViewDocument, choreography.Choreography);
util.inherits(ViewDocumentInputSet, choreography.InputSet);
util.inherits(ViewDocumentResultSet, choreography.ResultSet);
exports.ViewDocument = ViewDocument;




/******************************************************************************
Begin output wrapper classes
******************************************************************************/

/**
 * Utility function, to retrieve the array-type sub-item specified by the key from the parent (array) specified by the item.
 * Returns an empty array if key is not present.
 */
function getSubArrayByKey(item, key) {
	var val = item[key];
	if(val == null) {
		val = new Array();
	}
	return val;
}


