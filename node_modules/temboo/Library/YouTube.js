
var util = require("util");
var choreography = require("temboo/core/choreography");


/*
    FilterSearchResults
    Retrieve specific data fields for videos that match a search term.
*/


var FilterSearchResults = function(session) {
    /*
        Create a new instance of the FilterSearchResults Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/YouTube/FilterSearchResults"
    FilterSearchResults.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new FilterSearchResultsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new FilterSearchResultsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the FilterSearchResults
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var FilterSearchResultsInputSet = function() {
    FilterSearchResultsInputSet.super_.call(this);
        /*
        Set the value of the Callback input for this Choreo. ((optional, string) Value to identify the callback function to which the API response will be sent. Only necessary when ResponseFormat is json-in-script.)
        */
        this.set_Callback = function(value) {
            this.setInput("Callback", value);
        }

        /*
        Set the value of the FieldsToReturn input for this Choreo. ((required, string) Specify the fields and conditions to return in the result set.)
        */
        this.set_FieldsToReturn = function(value) {
            this.setInput("FieldsToReturn", value);
        }

        /*
        Set the value of the MaxResults input for this Choreo. ((optional, integer) Specify the maximum number of results to return. The default value is 10, the maximum value is 50.)
        */
        this.set_MaxResults = function(value) {
            this.setInput("MaxResults", value);
        }

        /*
        Set the value of the Query input for this Choreo. ((required, string) A feed search query term, including title, keyword, description, authors' username, or category. Enclose in quotation marks for an exact match.)
        */
        this.set_Query = function(value) {
            this.setInput("Query", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format of the response from YouTube. Accepts atom, rss, json, json-in-script, and jsonc. Defaults to atom.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the StartIndex input for this Choreo. ((optional, integer) Specify the first matching result to return. Uses a one-based index (the first result is 1 by default).)
        */
        this.set_StartIndex = function(value) {
            this.setInput("StartIndex", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the FilterSearchResults Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var FilterSearchResultsResultSet = function(resultStream) {
    FilterSearchResultsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from YouTube.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(FilterSearchResults, choreography.Choreography);
util.inherits(FilterSearchResultsInputSet, choreography.InputSet);
util.inherits(FilterSearchResultsResultSet, choreography.ResultSet);
exports.FilterSearchResults = FilterSearchResults;


/*
    GetLiveEvents
    Retrieve a list of live video events.
*/


var GetLiveEvents = function(session) {
    /*
        Create a new instance of the GetLiveEvents Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/YouTube/GetLiveEvents"
    GetLiveEvents.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GetLiveEventsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GetLiveEventsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the GetLiveEvents
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GetLiveEventsInputSet = function() {
    GetLiveEventsInputSet.super_.call(this);
        /*
        Set the value of the Callback input for this Choreo. ((optional, string) Value to identify the callback function to which the API response will be sent. Only necessary when ResponseFormat is json-in-script.)
        */
        this.set_Callback = function(value) {
            this.setInput("Callback", value);
        }

        /*
        Set the value of the MaxResults input for this Choreo. ((optional, integer) Specify the maximum number of results to return. The default value is 10, the maximum value is 50.)
        */
        this.set_MaxResults = function(value) {
            this.setInput("MaxResults", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format of the response from YouTube. Accepts atom, rss, json, json-in-script, and jsonc. Defaults to atom.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the StartIndex input for this Choreo. ((optional, integer) Specify the first matching result to return. Uses a one-based index (the first result is 1 by default).)
        */
        this.set_StartIndex = function(value) {
            this.setInput("StartIndex", value);
        }

        /*
        Set the value of the Type input for this Choreo. ((required, string) Specify the kind of live YouTube event list to retrieve: featured, live_now, upcoming, or recently_broadcasted.)
        */
        this.set_Type = function(value) {
            this.setInput("Type", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the GetLiveEvents Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GetLiveEventsResultSet = function(resultStream) {
    GetLiveEventsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from YouTube.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(GetLiveEvents, choreography.Choreography);
util.inherits(GetLiveEventsInputSet, choreography.InputSet);
util.inherits(GetLiveEventsResultSet, choreography.ResultSet);
exports.GetLiveEvents = GetLiveEvents;


/*
    GetStandardFeeds
    Retrieve a list of videos that reflect YouTube user behavior, or that were selected by YouTube staff.
*/


var GetStandardFeeds = function(session) {
    /*
        Create a new instance of the GetStandardFeeds Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/YouTube/GetStandardFeeds"
    GetStandardFeeds.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GetStandardFeedsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GetStandardFeedsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the GetStandardFeeds
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GetStandardFeedsInputSet = function() {
    GetStandardFeedsInputSet.super_.call(this);
        /*
        Set the value of the Callback input for this Choreo. ((optional, string) Value to identify the callback function to which the API response will be sent. Only necessary when ResponseFormat is json-in-script.)
        */
        this.set_Callback = function(value) {
            this.setInput("Callback", value);
        }

        /*
        Set the value of the MaxResults input for this Choreo. ((optional, integer) Specify the maximum number of results to return. The default value is 10, the maximum value is 50.)
        */
        this.set_MaxResults = function(value) {
            this.setInput("MaxResults", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format of the response from YouTube. Accepts atom, rss, json, json-in-script, and jsonc. Defaults to atom.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the StartIndex input for this Choreo. ((optional, integer) Specify the first matching result to return. Uses a one-based index (the first result is 1 by default).)
        */
        this.set_StartIndex = function(value) {
            this.setInput("StartIndex", value);
        }

        /*
        Set the value of the Time input for this Choreo. ((optional, string) Restrict the response to results relevant to the specified time frame. Valid values: today, this_week, this_month, and all_time (the default))
        */
        this.set_Time = function(value) {
            this.setInput("Time", value);
        }

        /*
        Set the value of the Type input for this Choreo. ((required, string) Enter top_rated, top_favorites, most_viewed, most_shared, most_popular, most_recent, most_discussed, most_responded, recently_featured, or on_the_web.)
        */
        this.set_Type = function(value) {
            this.setInput("Type", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the GetStandardFeeds Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GetStandardFeedsResultSet = function(resultStream) {
    GetStandardFeedsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from YouTube.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(GetStandardFeeds, choreography.Choreography);
util.inherits(GetStandardFeedsInputSet, choreography.InputSet);
util.inherits(GetStandardFeedsResultSet, choreography.ResultSet);
exports.GetStandardFeeds = GetStandardFeeds;


/*
    GetTrendingVideos
    Retrieves Movies and Trailers videos that have had the greatest increases in popularity.
*/


var GetTrendingVideos = function(session) {
    /*
        Create a new instance of the GetTrendingVideos Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/YouTube/GetTrendingVideos"
    GetTrendingVideos.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GetTrendingVideosResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GetTrendingVideosInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the GetTrendingVideos
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GetTrendingVideosInputSet = function() {
    GetTrendingVideosInputSet.super_.call(this);
        /*
        Set the value of the Callback input for this Choreo. ((optional, string) Value to identify the callback function to which the API response will be sent. Only necessary when ResponseFormat is json-in-script.)
        */
        this.set_Callback = function(value) {
            this.setInput("Callback", value);
        }

        /*
        Set the value of the PaidContent input for this Choreo. ((optional, boolean) Restrict the search to only include paid content ("true") or to include both paid and free content ("false", the default).)
        */
        this.set_PaidContent = function(value) {
            this.setInput("PaidContent", value);
        }

        /*
        Set the value of the Region input for this Choreo. ((optional, string) Restrict search to movies viewable in a specific region (defaults to "US"). Required for paid-content-only searches.)
        */
        this.set_Region = function(value) {
            this.setInput("Region", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format of the response from YouTube. Accepts atom, rss, json, json-in-script, and jsonc. Defaults to atom.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the GetTrendingVideos Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GetTrendingVideosResultSet = function(resultStream) {
    GetTrendingVideosResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from YouTube.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(GetTrendingVideos, choreography.Choreography);
util.inherits(GetTrendingVideosInputSet, choreography.InputSet);
util.inherits(GetTrendingVideosResultSet, choreography.ResultSet);
exports.GetTrendingVideos = GetTrendingVideos;


/*
    GetVideoData
    Retrieve information about a single video using its ID.
*/


var GetVideoData = function(session) {
    /*
        Create a new instance of the GetVideoData Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/YouTube/GetVideoData"
    GetVideoData.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GetVideoDataResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GetVideoDataInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the GetVideoData
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GetVideoDataInputSet = function() {
    GetVideoDataInputSet.super_.call(this);
        /*
        Set the value of the Callback input for this Choreo. ((optional, string) Value to identify the callback function to which the API response will be sent. Only necessary when ResponseFormat is json-in-script.)
        */
        this.set_Callback = function(value) {
            this.setInput("Callback", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format of the response from YouTube. Accepts atom, rss, json, json-in-script, and jsonc. Defaults to atom.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the VideoID input for this Choreo. ((required, string) The unique ID given to a video by YouTube.)
        */
        this.set_VideoID = function(value) {
            this.setInput("VideoID", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the GetVideoData Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GetVideoDataResultSet = function(resultStream) {
    GetVideoDataResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from YouTube.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(GetVideoData, choreography.Choreography);
util.inherits(GetVideoDataInputSet, choreography.InputSet);
util.inherits(GetVideoDataResultSet, choreography.ResultSet);
exports.GetVideoData = GetVideoData;


/*
    SearchByCategory
    Retrieve a list of videos in a specified category.
*/


var SearchByCategory = function(session) {
    /*
        Create a new instance of the SearchByCategory Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/YouTube/SearchByCategory"
    SearchByCategory.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new SearchByCategoryResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new SearchByCategoryInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the SearchByCategory
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var SearchByCategoryInputSet = function() {
    SearchByCategoryInputSet.super_.call(this);
        /*
        Set the value of the Callback input for this Choreo. ((optional, string) Value to identify the callback function to which the API response will be sent. Only necessary when ResponseFormat is json-in-script.)
        */
        this.set_Callback = function(value) {
            this.setInput("Callback", value);
        }

        /*
        Set the value of the Category input for this Choreo. ((required, string) A valid YouTube video category name, entered with the first letter capitalized.)
        */
        this.set_Category = function(value) {
            this.setInput("Category", value);
        }

        /*
        Set the value of the MaxResults input for this Choreo. ((optional, integer) Specify the maximum number of results to return. The default value is 10, the maximum value is 50.)
        */
        this.set_MaxResults = function(value) {
            this.setInput("MaxResults", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format of the response from YouTube. Accepts atom, rss, json, json-in-script, and jsonc. Defaults to atom.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the StartIndex input for this Choreo. ((optional, integer) Specify the first matching result to return. Uses a one-based index (the first result is 1 by default).)
        */
        this.set_StartIndex = function(value) {
            this.setInput("StartIndex", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the SearchByCategory Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var SearchByCategoryResultSet = function(resultStream) {
    SearchByCategoryResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from YouTube.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(SearchByCategory, choreography.Choreography);
util.inherits(SearchByCategoryInputSet, choreography.InputSet);
util.inherits(SearchByCategoryResultSet, choreography.ResultSet);
exports.SearchByCategory = SearchByCategory;


/*
    SearchByKeyword
    Retrieve a list of videos to which a specified keyword has been assigned.
*/


var SearchByKeyword = function(session) {
    /*
        Create a new instance of the SearchByKeyword Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/YouTube/SearchByKeyword"
    SearchByKeyword.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new SearchByKeywordResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new SearchByKeywordInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the SearchByKeyword
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var SearchByKeywordInputSet = function() {
    SearchByKeywordInputSet.super_.call(this);
        /*
        Set the value of the Callback input for this Choreo. ((optional, string) Value to identify the callback function to which the API response will be sent. Only necessary when ResponseFormat is json-in-script.)
        */
        this.set_Callback = function(value) {
            this.setInput("Callback", value);
        }

        /*
        Set the value of the Keyword input for this Choreo. ((required, string) A keyword associated with a  video, entered in all lowercase letters. Separate multiple keywords with commas (but no spaces).)
        */
        this.set_Keyword = function(value) {
            this.setInput("Keyword", value);
        }

        /*
        Set the value of the MaxResults input for this Choreo. ((optional, integer) Specify the maximum number of results to return. The default value is 10, the maximum value is 50.)
        */
        this.set_MaxResults = function(value) {
            this.setInput("MaxResults", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format of the response from YouTube. Accepts atom, rss, json, json-in-script, and jsonc. Defaults to atom.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the StartIndex input for this Choreo. ((optional, integer) Specify the first matching result to return. Uses a one-based index (the first result is 1 by default).)
        */
        this.set_StartIndex = function(value) {
            this.setInput("StartIndex", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the SearchByKeyword Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var SearchByKeywordResultSet = function(resultStream) {
    SearchByKeywordResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from YouTube.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(SearchByKeyword, choreography.Choreography);
util.inherits(SearchByKeywordInputSet, choreography.InputSet);
util.inherits(SearchByKeywordResultSet, choreography.ResultSet);
exports.SearchByKeyword = SearchByKeyword;


/*
    SearchChannels
    Retrieve a list of video channels.
*/


var SearchChannels = function(session) {
    /*
        Create a new instance of the SearchChannels Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/YouTube/SearchChannels"
    SearchChannels.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new SearchChannelsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new SearchChannelsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the SearchChannels
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var SearchChannelsInputSet = function() {
    SearchChannelsInputSet.super_.call(this);
        /*
        Set the value of the Callback input for this Choreo. ((optional, string) Value to identify the callback function to which the API response will be sent. Only necessary when ResponseFormat is json-in-script.)
        */
        this.set_Callback = function(value) {
            this.setInput("Callback", value);
        }

        /*
        Set the value of the MaxResults input for this Choreo. ((optional, integer) Specify the maximum number of results to return. The default value is 10, the maximum value is 50.)
        */
        this.set_MaxResults = function(value) {
            this.setInput("MaxResults", value);
        }

        /*
        Set the value of the Query input for this Choreo. ((required, string) A search query term, such as a title, keyword, description, author's username, or category. Enclose in quotation marks for an exact match.)
        */
        this.set_Query = function(value) {
            this.setInput("Query", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format of the response from YouTube. Accepts atom, rss, json, json-in-script, and jsonc. Defaults to atom.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the StartIndex input for this Choreo. ((optional, integer) Specify the first matching result to return. Uses a one-based index (the first result is 1 by default).)
        */
        this.set_StartIndex = function(value) {
            this.setInput("StartIndex", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the SearchChannels Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var SearchChannelsResultSet = function(resultStream) {
    SearchChannelsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from YouTube.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(SearchChannels, choreography.Choreography);
util.inherits(SearchChannelsInputSet, choreography.InputSet);
util.inherits(SearchChannelsResultSet, choreography.ResultSet);
exports.SearchChannels = SearchChannels;


/*
    SearchPlaylists
    Retrieve a list of playlists matching a search term.
*/


var SearchPlaylists = function(session) {
    /*
        Create a new instance of the SearchPlaylists Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/YouTube/SearchPlaylists"
    SearchPlaylists.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new SearchPlaylistsResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new SearchPlaylistsInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the SearchPlaylists
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var SearchPlaylistsInputSet = function() {
    SearchPlaylistsInputSet.super_.call(this);
        /*
        Set the value of the Callback input for this Choreo. ((optional, string) Value to identify the callback function to which the API response will be sent. Only necessary when ResponseFormat is json-in-script.)
        */
        this.set_Callback = function(value) {
            this.setInput("Callback", value);
        }

        /*
        Set the value of the MaxResults input for this Choreo. ((optional, integer) Specify the maximum number of results to return. The default value is 10, the maximum value is 50.)
        */
        this.set_MaxResults = function(value) {
            this.setInput("MaxResults", value);
        }

        /*
        Set the value of the Playlist input for this Choreo. ((required, string) The name of a playlist to search for. Separate multiple playlist names with commas (but no spaces).)
        */
        this.set_Playlist = function(value) {
            this.setInput("Playlist", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((required, string) The format of the response from YouTube. Accepts atom, rss, json, json-in-script, and jsonc. Defaults to atom.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the StartIndex input for this Choreo. ((optional, integer) Specify the first matching result to return. Uses a one-based index (the first result is 1 by default).)
        */
        this.set_StartIndex = function(value) {
            this.setInput("StartIndex", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the SearchPlaylists Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var SearchPlaylistsResultSet = function(resultStream) {
    SearchPlaylistsResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from YouTube.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(SearchPlaylists, choreography.Choreography);
util.inherits(SearchPlaylistsInputSet, choreography.InputSet);
util.inherits(SearchPlaylistsResultSet, choreography.ResultSet);
exports.SearchPlaylists = SearchPlaylists;


/*
    SearchVideos
    Retrieve a list of videos matching a specified search term.
*/


var SearchVideos = function(session) {
    /*
        Create a new instance of the SearchVideos Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/YouTube/SearchVideos"
    SearchVideos.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new SearchVideosResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new SearchVideosInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the SearchVideos
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var SearchVideosInputSet = function() {
    SearchVideosInputSet.super_.call(this);
        /*
        Set the value of the Callback input for this Choreo. ((optional, string) Value to identify the callback function to which the API response will be sent. Only necessary when ResponseFormat is json-in-script.)
        */
        this.set_Callback = function(value) {
            this.setInput("Callback", value);
        }

        /*
        Set the value of the MaxResults input for this Choreo. ((optional, integer) Specify the maximum number of results to return. The default value is 10, the maximum value is 50.)
        */
        this.set_MaxResults = function(value) {
            this.setInput("MaxResults", value);
        }

        /*
        Set the value of the Query input for this Choreo. ((required, string) A search query term, including title, keyword, description, author's username, or category. Enclose in quotation marks for an for an exact match.)
        */
        this.set_Query = function(value) {
            this.setInput("Query", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) The format of the response from YouTube. Accepts atom, rss, json, json-in-script, and jsonc. Defaults to atom.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the StartIndex input for this Choreo. ((optional, integer) Specify the first matching result to return. Uses a one-based index (the first result is 1 by default).)
        */
        this.set_StartIndex = function(value) {
            this.setInput("StartIndex", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the SearchVideos Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var SearchVideosResultSet = function(resultStream) {
    SearchVideosResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The response from YouTube.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(SearchVideos, choreography.Choreography);
util.inherits(SearchVideosInputSet, choreography.InputSet);
util.inherits(SearchVideosResultSet, choreography.ResultSet);
exports.SearchVideos = SearchVideos;




/******************************************************************************
Begin output wrapper classes
******************************************************************************/

/**
 * Utility function, to retrieve the array-type sub-item specified by the key from the parent (array) specified by the item.
 * Returns an empty array if key is not present.
 */
function getSubArrayByKey(item, key) {
	var val = item[key];
	if(val == null) {
		val = new Array();
	}
	return val;
}


