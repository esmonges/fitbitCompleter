
var util = require("util");
var choreography = require("temboo/core/choreography");


/*
    ConvertCSVToBase64EncodedExcel
    Converts a CSV formatted file to Base64 encoded Excel data.
*/


var ConvertCSVToBase64EncodedExcel = function(session) {
    /*
        Create a new instance of the ConvertCSVToBase64EncodedExcel Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Utilities/DataConversions/ConvertCSVToBase64EncodedExcel"
    ConvertCSVToBase64EncodedExcel.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new ConvertCSVToBase64EncodedExcelResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new ConvertCSVToBase64EncodedExcelInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the ConvertCSVToBase64EncodedExcel
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var ConvertCSVToBase64EncodedExcelInputSet = function() {
    ConvertCSVToBase64EncodedExcelInputSet.super_.call(this);
        /*
        Set the value of the CSVFile input for this Choreo. ((conditional, multiline) The CSV data you want to convert to XLS format. Required unless using the VaultFile input alias (an advanced option used when running Choreos in the Temboo Designer).)
        */
        this.set_CSVFile = function(value) {
            this.setInput("CSVFile", value);
        }

        /*
        Set the value of the VaultFile input for this Choreo. ((optional, vault file) A path to a CSV file you've stored in the Vault. This can be used as an alternative to the CSVFile input variable.)
        */

}

/*
A ResultSet with methods tailored to the values returned by the ConvertCSVToBase64EncodedExcel Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var ConvertCSVToBase64EncodedExcelResultSet = function(resultStream) {
    ConvertCSVToBase64EncodedExcelResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "ExcelFile" output from this Choreo execution. ((string) The Base64 encoded Excel data.)
        */
        this.get_ExcelFile = function() {
            return this.getResult("ExcelFile");
        }
}

util.inherits(ConvertCSVToBase64EncodedExcel, choreography.Choreography);
util.inherits(ConvertCSVToBase64EncodedExcelInputSet, choreography.InputSet);
util.inherits(ConvertCSVToBase64EncodedExcelResultSet, choreography.ResultSet);
exports.ConvertCSVToBase64EncodedExcel = ConvertCSVToBase64EncodedExcel;


/*
    ConvertExcelToCSV
    Converts Excel (.xls) formatted data to CSV.
*/


var ConvertExcelToCSV = function(session) {
    /*
        Create a new instance of the ConvertExcelToCSV Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Utilities/DataConversions/ConvertExcelToCSV"
    ConvertExcelToCSV.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new ConvertExcelToCSVResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new ConvertExcelToCSVInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the ConvertExcelToCSV
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var ConvertExcelToCSVInputSet = function() {
    ConvertExcelToCSVInputSet.super_.call(this);
        /*
        Set the value of the ExcelFile input for this Choreo. ((conditional, string) The base64-encoded contents of the Excel file that you want to convert to CSV. Required unless using the VaultFile input alias (an advanced option used when running Choreos in the Temboo Designer).)
        */
        this.set_ExcelFile = function(value) {
            this.setInput("ExcelFile", value);
        }

        /*
        Set the value of the VaultFile input for this Choreo. ((optional, vault file) A path to an Excel file you've stored in the Vault. This can be used as an alternative to the ExcelFile input variable.)
        */

}

/*
A ResultSet with methods tailored to the values returned by the ConvertExcelToCSV Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var ConvertExcelToCSVResultSet = function(resultStream) {
    ConvertExcelToCSVResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "CSVFile" output from this Choreo execution. ((string) The CSV formatted data.)
        */
        this.get_CSVFile = function() {
            return this.getResult("CSVFile");
        }
}

util.inherits(ConvertExcelToCSV, choreography.Choreography);
util.inherits(ConvertExcelToCSVInputSet, choreography.InputSet);
util.inherits(ConvertExcelToCSVResultSet, choreography.ResultSet);
exports.ConvertExcelToCSV = ConvertExcelToCSV;


/*
    ConvertExcelToXML
    Converts Excel (.xls) formatted data to XML.
*/


var ConvertExcelToXML = function(session) {
    /*
        Create a new instance of the ConvertExcelToXML Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Utilities/DataConversions/ConvertExcelToXML"
    ConvertExcelToXML.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new ConvertExcelToXMLResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new ConvertExcelToXMLInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the ConvertExcelToXML
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var ConvertExcelToXMLInputSet = function() {
    ConvertExcelToXMLInputSet.super_.call(this);
        /*
        Set the value of the ExcelFile input for this Choreo. ((conditional, string) The base64-encoded contents of the Excel file that you want to convert to CSV. Required unless using the VaultFile input alias (an advanced option used when running Choreos in the Temboo Designer).)
        */
        this.set_ExcelFile = function(value) {
            this.setInput("ExcelFile", value);
        }

        /*
        Set the value of the VaultFile input for this Choreo. ((optional, vault file) A path to an Excel file that has been uploaded to the vault. You can use this input alias as an alternative to the ExcelFile input variable.)
        */

}

/*
A ResultSet with methods tailored to the values returned by the ConvertExcelToXML Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var ConvertExcelToXMLResultSet = function(resultStream) {
    ConvertExcelToXMLResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "XMLFile" output from this Choreo execution. ((xml) The data in XML format.)
        */
        this.get_XMLFile = function() {
            return this.getResult("XMLFile");
        }
}

util.inherits(ConvertExcelToXML, choreography.Choreography);
util.inherits(ConvertExcelToXMLInputSet, choreography.InputSet);
util.inherits(ConvertExcelToXMLResultSet, choreography.ResultSet);
exports.ConvertExcelToXML = ConvertExcelToXML;


/*
    ConvertJSONToXML
    Converts data from JSON format to a XML format.
*/


var ConvertJSONToXML = function(session) {
    /*
        Create a new instance of the ConvertJSONToXML Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Utilities/DataConversions/ConvertJSONToXML"
    ConvertJSONToXML.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new ConvertJSONToXMLResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new ConvertJSONToXMLInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the ConvertJSONToXML
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var ConvertJSONToXMLInputSet = function() {
    ConvertJSONToXMLInputSet.super_.call(this);
        /*
        Set the value of the JSON input for this Choreo. ((required, json) The JSON data that you want to convert to XML.)
        */
        this.set_JSON = function(value) {
            this.setInput("JSON", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the ConvertJSONToXML Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var ConvertJSONToXMLResultSet = function(resultStream) {
    ConvertJSONToXMLResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "XML" output from this Choreo execution. ((xml) The converted data in XML format.)
        */
        this.get_XML = function() {
            return this.getResult("XML");
        }
}

util.inherits(ConvertJSONToXML, choreography.Choreography);
util.inherits(ConvertJSONToXMLInputSet, choreography.InputSet);
util.inherits(ConvertJSONToXMLResultSet, choreography.ResultSet);
exports.ConvertJSONToXML = ConvertJSONToXML;


/*
    ConvertXMLToBase64EncodedExcel
    Converts an XML file to a Base64 encoded Excel file.
*/


var ConvertXMLToBase64EncodedExcel = function(session) {
    /*
        Create a new instance of the ConvertXMLToBase64EncodedExcel Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Utilities/DataConversions/ConvertXMLToBase64EncodedExcel"
    ConvertXMLToBase64EncodedExcel.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new ConvertXMLToBase64EncodedExcelResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new ConvertXMLToBase64EncodedExcelInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the ConvertXMLToBase64EncodedExcel
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var ConvertXMLToBase64EncodedExcelInputSet = function() {
    ConvertXMLToBase64EncodedExcelInputSet.super_.call(this);
        /*
        Set the value of the XMLFile input for this Choreo. ((required, xml) The XML file you want to convert to XLS format. See documentation for information on the required XML schema.)
        */
        this.set_XMLFile = function(value) {
            this.setInput("XMLFile", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the ConvertXMLToBase64EncodedExcel Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var ConvertXMLToBase64EncodedExcelResultSet = function(resultStream) {
    ConvertXMLToBase64EncodedExcelResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "ExcelFile" output from this Choreo execution. (The Base64 encoded Excel data .)
        */
        this.get_ExcelFile = function() {
            return this.getResult("ExcelFile");
        }
}

util.inherits(ConvertXMLToBase64EncodedExcel, choreography.Choreography);
util.inherits(ConvertXMLToBase64EncodedExcelInputSet, choreography.InputSet);
util.inherits(ConvertXMLToBase64EncodedExcelResultSet, choreography.ResultSet);
exports.ConvertXMLToBase64EncodedExcel = ConvertXMLToBase64EncodedExcel;


/*
    ConvertXMLToJSON
    Converts data from XML format to a JSON format.
*/


var ConvertXMLToJSON = function(session) {
    /*
        Create a new instance of the ConvertXMLToJSON Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Utilities/DataConversions/ConvertXMLToJSON"
    ConvertXMLToJSON.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new ConvertXMLToJSONResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new ConvertXMLToJSONInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the ConvertXMLToJSON
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var ConvertXMLToJSONInputSet = function() {
    ConvertXMLToJSONInputSet.super_.call(this);
        /*
        Set the value of the XML input for this Choreo. ((required, xml) The XML file that you want to convert to JSON format.)
        */
        this.set_XML = function(value) {
            this.setInput("XML", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the ConvertXMLToJSON Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var ConvertXMLToJSONResultSet = function(resultStream) {
    ConvertXMLToJSONResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "JSON" output from this Choreo execution. ((json) The converted data in JSON format.)
        */
        this.get_JSON = function() {
            return this.getResult("JSON");
        }
}

util.inherits(ConvertXMLToJSON, choreography.Choreography);
util.inherits(ConvertXMLToJSONInputSet, choreography.InputSet);
util.inherits(ConvertXMLToJSONResultSet, choreography.ResultSet);
exports.ConvertXMLToJSON = ConvertXMLToJSON;




/******************************************************************************
Begin output wrapper classes
******************************************************************************/

/**
 * Utility function, to retrieve the array-type sub-item specified by the key from the parent (array) specified by the item.
 * Returns an empty array if key is not present.
 */
function getSubArrayByKey(item, key) {
	var val = item[key];
	if(val == null) {
		val = new Array();
	}
	return val;
}


