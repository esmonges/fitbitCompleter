
var util = require("util");
var choreography = require("temboo/core/choreography");


/*
    CreateGallery
    Add a comment to a specified photo on Flickr.
*/


var CreateGallery = function(session) {
    /*
        Create a new instance of the CreateGallery Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Flickr/Galleries/CreateGallery"
    CreateGallery.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new CreateGalleryResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new CreateGalleryInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the CreateGallery
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var CreateGalleryInputSet = function() {
    CreateGalleryInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((required, string) The API Key provided by Flickr (AKA the OAuth Consumer Key).)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the APISecret input for this Choreo. ((required, string) The API Secret provided by Flickr (AKA the OAuth Consumer Secret).)
        */
        this.set_APISecret = function(value) {
            this.setInput("APISecret", value);
        }

        /*
        Set the value of the AccessTokenSecret input for this Choreo. ((required, string) The Access Token Secret retrieved during the OAuth process.)
        */
        this.set_AccessTokenSecret = function(value) {
            this.setInput("AccessTokenSecret", value);
        }

        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The Access Token retrieved during the OAuth process.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the Description input for this Choreo. ((required, string) The text of the comment you are adding.)
        */
        this.set_Description = function(value) {
            this.setInput("Description", value);
        }

        /*
        Set the value of the PrimaryPhotoID input for this Choreo. ((required, integer) The id of the photo to add a comment to.)
        */
        this.set_PrimaryPhotoID = function(value) {
            this.setInput("PrimaryPhotoID", value);
        }

        /*
        Set the value of the Title input for this Choreo. ((required, string) The name of the gallery.)
        */
        this.set_Title = function(value) {
            this.setInput("Title", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the CreateGallery Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var CreateGalleryResultSet = function(resultStream) {
    CreateGalleryResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Flickr.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(CreateGallery, choreography.Choreography);
util.inherits(CreateGalleryInputSet, choreography.InputSet);
util.inherits(CreateGalleryResultSet, choreography.ResultSet);
exports.CreateGallery = CreateGallery;


/*
    GetGalleryList
    Get a gallery list for a specfied user.
*/


var GetGalleryList = function(session) {
    /*
        Create a new instance of the GetGalleryList Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Flickr/Galleries/GetGalleryList"
    GetGalleryList.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GetGalleryListResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GetGalleryListInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the GetGalleryList
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GetGalleryListInputSet = function() {
    GetGalleryListInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((required, string) The API Key provided by Flickr (AKA the OAuth Consumer Key).)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the GalleriesPerPage input for this Choreo. ((optional, integer) Specify the number of galleries that are to be returned per page.  If null, defaults to 100 galleries returned.  Maximum is 500.)
        */
        this.set_GalleriesPerPage = function(value) {
            this.setInput("GalleriesPerPage", value);
        }

        /*
        Set the value of the Page input for this Choreo. ((optional, integer) Enter the number of results pages to be returned.  Default is: 1.)
        */
        this.set_Page = function(value) {
            this.setInput("Page", value);
        }

        /*
        Set the value of the UserID input for this Choreo. ((optional, string) Provide the NSID for the user whose gallery list(s) are to be retreived.)
        */
        this.set_UserID = function(value) {
            this.setInput("UserID", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the GetGalleryList Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GetGalleryListResultSet = function(resultStream) {
    GetGalleryListResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Flickr.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(GetGalleryList, choreography.Choreography);
util.inherits(GetGalleryListInputSet, choreography.InputSet);
util.inherits(GetGalleryListResultSet, choreography.ResultSet);
exports.GetGalleryList = GetGalleryList;




/******************************************************************************
Begin output wrapper classes
******************************************************************************/

/**
 * Utility function, to retrieve the array-type sub-item specified by the key from the parent (array) specified by the item.
 * Returns an empty array if key is not present.
 */
function getSubArrayByKey(item, key) {
	var val = item[key];
	if(val == null) {
		val = new Array();
	}
	return val;
}


