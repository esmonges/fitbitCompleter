
var util = require("util");
var choreography = require("temboo/core/choreography");


/*
    FindPeopleByEmail
    Obtain a user's NSID by providing their email address.
*/


var FindPeopleByEmail = function(session) {
    /*
        Create a new instance of the FindPeopleByEmail Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Flickr/People/FindPeopleByEmail"
    FindPeopleByEmail.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new FindPeopleByEmailResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new FindPeopleByEmailInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the FindPeopleByEmail
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var FindPeopleByEmailInputSet = function() {
    FindPeopleByEmailInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((required, string) The API Key provided by Flickr (AKA the OAuth Consumer Key).)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the FindEmail input for this Choreo. ((required, string) Enter the email of the user being sought.)
        */
        this.set_FindEmail = function(value) {
            this.setInput("FindEmail", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the FindPeopleByEmail Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var FindPeopleByEmailResultSet = function(resultStream) {
    FindPeopleByEmailResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Flickr.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(FindPeopleByEmail, choreography.Choreography);
util.inherits(FindPeopleByEmailInputSet, choreography.InputSet);
util.inherits(FindPeopleByEmailResultSet, choreography.ResultSet);
exports.FindPeopleByEmail = FindPeopleByEmail;


/*
    GetListOfPeople
    Retrieve a list of people in a given photo.
*/


var GetListOfPeople = function(session) {
    /*
        Create a new instance of the GetListOfPeople Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Flickr/People/GetListOfPeople"
    GetListOfPeople.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new GetListOfPeopleResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new GetListOfPeopleInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the GetListOfPeople
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var GetListOfPeopleInputSet = function() {
    GetListOfPeopleInputSet.super_.call(this);
        /*
        Set the value of the APIKey input for this Choreo. ((required, string) The API Key provided by Flickr (AKA the OAuth Consumer Key).)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the PhotoID input for this Choreo. ((required, string) Enter the ID of a photo for which people will be listed.)
        */
        this.set_PhotoID = function(value) {
            this.setInput("PhotoID", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the GetListOfPeople Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var GetListOfPeopleResultSet = function(resultStream) {
    GetListOfPeopleResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from Flickr.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(GetListOfPeople, choreography.Choreography);
util.inherits(GetListOfPeopleInputSet, choreography.InputSet);
util.inherits(GetListOfPeopleResultSet, choreography.ResultSet);
exports.GetListOfPeople = GetListOfPeople;




/******************************************************************************
Begin output wrapper classes
******************************************************************************/

/**
 * Utility function, to retrieve the array-type sub-item specified by the key from the parent (array) specified by the item.
 * Returns an empty array if key is not present.
 */
function getSubArrayByKey(item, key) {
	var val = item[key];
	if(val == null) {
		val = new Array();
	}
	return val;
}


